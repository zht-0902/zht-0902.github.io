<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>（集合）多线程</title>
    <url>/2021/10/21/(%E9%9B%86%E5%90%88)%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="List不安全"><a href="#List不安全" class="headerlink" title="List不安全"></a>List不安全</h2><p><strong>单线程下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            list.add(<span class="string">&quot;a+&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">        list.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>多线程下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果：</strong></p>
<p><a href="https://imgtu.com/i/7pxISg"><img src="https://s4.ax1x.com/2022/01/07/7pxISg.png" alt="7pxISg.png"></a></p>
<p>因为ArrayList源码中的add方法没有加锁而CopyOnWriteArrayList加了Lock锁，所以会一个ConcurrentModificationException    的异常。</p>
<p><strong>解决方案：</strong></p>
<ol>
<li>List<String> list &#x3D; new Vector&lt;&gt;();</li>
<li>List<String> list &#x3D; Collections.synchronizedList(new ArrayList&lt;&gt; ()); </li>
<li>List<String> list &#x3D; new CopyOnWriteArrayList&lt;&gt;();</li>
</ol>
<p><strong>举例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadList</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list=<span class="keyword">new</span> <span class="title class_">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                list.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">                System.out.println(list);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果：</strong></p>
<p><a href="https://imgtu.com/i/7pzEtK"><img src="https://s4.ax1x.com/2022/01/07/7pzEtK.png" alt="7pzEtK.png"></a></p>
<p><strong>写入时复制（CopyOnWrite）思想</strong></p>
<p>​                  写入时复制（CopyOnWrite，简称COW）思想是计算机程序设计领域中的一种优化策略。其核心思想是，如果有多个调用者（Callers）同时要求相同的资源（如内存或者是磁盘上的数据存储），他们会共同获取相同的指针指向相同的资源，直到某个调用者视图修改资源内容时，系统才会真正复制一份专用副本（private copy）给该调用者，而其他调用者所见到的最初的资源仍然保持不变。这过程对其他的调用者都是透明的（transparently）。此做法主要的优点是如果调用者没有修改资源，就不会有副本（private copy）被创建，因此多个调用者只是读取操作时可以共享同一份资源。读写分离，写时复制出一个新的数组，完成插入、修改或者移除操作后将新数组赋值给array</p>
<p><strong>CopyOnWriteArrayList为什么并发安全且性能比Vector好</strong></p>
<p>​                   Vector是增删改查方法都加了synchronized，保证同步，但是每个方法执行的时候都要去获得锁，性能就会大大下降，而CopyOnWriteArrayList 只是在增删改上加锁，但是读不加锁，在读方面的性能就好于Vector，CopyOnWriteArrayList支持读多写少的并发情况。</p>
<h2 id="Set不安全"><a href="#Set不安全" class="headerlink" title="Set不安全"></a>Set不安全</h2><p><strong>和LIst同理：</strong></p>
<p>因为HashSet源码中的add方法没有加锁而CopyOnWriteArraySet加了Lock锁，所以会一个ConcurrentModificationException    的异常。</p>
<p><strong>解决方案：</strong></p>
<ol>
<li>List<String> list &#x3D; Collections.synchronizedList(new HashSet&lt;&gt; ()); </li>
<li>List<String> list &#x3D; new CopyOnWriteArraySet&lt;&gt;();</li>
</ol>
<p><strong>举例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadSet</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Set&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">CopyOnWriteArraySet</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">130</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                set.add(UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">                System.out.println(set);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Map不安全"><a href="#Map不安全" class="headerlink" title="Map不安全"></a>Map不安全</h2><p><strong>与前者相似：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadMap</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        Map&lt;String,String&gt; map=<span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">190</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">                map.put(Thread.currentThread().getName(),UUID.randomUUID().toString().substring(<span class="number">0</span>,<span class="number">8</span>));</span><br><span class="line">                System.out.println(map);</span><br><span class="line">            &#125;,String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>这三个类中源码里面用到了lock或者synchronized。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA基础</tag>
      </tags>
  </entry>
  <entry>
    <title>IOC</title>
    <url>/2021/10/01/IOC/</url>
    <content><![CDATA[<h2 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h2><p>**控制反转即IoC (Inversion of Control)**，它把传统上由程序代码直接操控的对 象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反 转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。 Spring IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。</p>
<p><strong>作用</strong>：</p>
<ul>
<li>管理对象的创建和依赖关系的维护。</li>
<li>解耦，由容器去维护具体的对象</li>
<li>托管了类的产生过程，比如我们需要在类的产生过程中做一些处理， 最直接的例子就是代理，如果有容器程序可以把这部分处理交给容器，应 用程序则无需去关心类是如何完成代理的</li>
</ul>
<p><strong>支持哪些功能：</strong></p>
<ul>
<li>依赖注入 </li>
<li>依赖检查 </li>
<li>自动装配 </li>
<li>支持集合 </li>
<li>指定初始化方法和销毁方法 </li>
<li>支持回调某些方法（但是需要实现 Spring 接口，略有侵入）</li>
</ul>
<p><strong>注入方式</strong>：</p>
<p><strong>构造器注入</strong>：</p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>无参方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--set注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zht.pojo.People&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zht&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>有参方式：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zht.pojo.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过下标--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zht&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过参数名字--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  通过参数类型</span></span><br><span class="line"><span class="comment">    &lt;constructor-arg type=&quot;java.lang.String&quot; value=&quot;zht&quot;&gt;&lt;/constructor-arg&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试以及测试结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext-dao.xml&quot;</span>);</span><br><span class="line">    <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> (People) applicationContext.getBean(<span class="string">&quot;people&quot;</span>);</span><br><span class="line">    System.out.println(people.getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">结果：</span><br><span class="line">zht</span><br></pre></td></tr></table></figure>

<p><strong>set注入：</strong></p>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String adr;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Address</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAdr</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> adr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAdr</span><span class="params">(String adr)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.adr = adr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;adr=&#x27;&quot;</span> + adr + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; card;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; games;</span><br><span class="line">    <span class="keyword">private</span>  String[] books;</span><br><span class="line">    <span class="keyword">private</span> Properties info;</span><br><span class="line">    <span class="keyword">private</span>  String wife;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;People&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&quot;, card=&quot;</span> + card +</span><br><span class="line">                <span class="string">&quot;, games=&quot;</span> + games +</span><br><span class="line">                <span class="string">&quot;, books=&quot;</span> + Arrays.toString(books) +</span><br><span class="line">                <span class="string">&quot;, info=&quot;</span> + info +</span><br><span class="line">                <span class="string">&quot;, wife=&#x27;&quot;</span> + wife + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getWife</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWife</span><span class="params">(String wife)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.wife = wife;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getCard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCard</span><span class="params">(Map&lt;String, String&gt; card)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.card = card;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;String&gt; <span class="title function_">getGames</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setGames</span><span class="params">(Set&lt;String&gt; games)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.games = games;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String[] getBooks() &#123;</span><br><span class="line">        <span class="keyword">return</span> books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBooks</span><span class="params">(String[] books)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.books = books;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfo</span><span class="params">(Properties info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">People</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;address&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zht.pojo.Address&quot;</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;adr&quot;</span> <span class="attr">value</span>=<span class="string">&quot;常德&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zht.pojo.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--常量注入--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zht&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--bean注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;address&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--数组注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;books&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>金瓶梅<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--set注入，和list标签不一样，不允许重复值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;games&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>穿越火线<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>英雄联盟<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--map注入·--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;card&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;邮政&quot;</span> <span class="attr">value</span>=<span class="string">&quot;15623&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Properties注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;学号&quot;</span>&gt;</span>156852<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;班级&quot;</span>&gt;</span>19330<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--空注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;wife&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试以及结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext-dao.xml&quot;</span>);</span><br><span class="line">    <span class="type">People</span> <span class="variable">people</span> <span class="operator">=</span> (People) applicationContext.getBean(<span class="string">&quot;people&quot;</span>);</span><br><span class="line">    System.out.println(people);</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">People&#123;name=<span class="string">&#x27;zht&#x27;</span>, age=<span class="number">20</span>, address=Address&#123;adr=<span class="string">&#x27;常德&#x27;</span>&#125;, card=&#123;邮政=<span class="number">15623</span>&#125;, games=[穿越火线, 英雄联盟], books=[西游记, 金瓶梅], info=&#123;学号=<span class="number">156852</span>, 班级=<span class="number">19330</span>&#125;, wife=<span class="string">&#x27;null&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>AOP</title>
    <url>/2021/10/01/AOP/</url>
    <content><![CDATA[<h2 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h2><p><strong>AOP（Aspect Oriented Programming）</strong>意为：<strong>面向切面编程</strong>，通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<p><a href="https://imgtu.com/i/7ECvUU"><img src="https://s4.ax1x.com/2022/01/10/7ECvUU.png" alt="7ECvUU.png"></a></p>
<p><strong>通知类型：</strong></p>
<p><a href="https://imgtu.com/i/7EPZ5D"><img src="https://s4.ax1x.com/2022/01/10/7EPZ5D.png" alt="7EPZ5D.png"></a></p>
<p><strong>名词解释：</strong></p>
<p><strong>切面（Aspect）</strong>：切面是通知和切点的结合。通知和切点共同定义了切面 的全部内容。 在Spring AOP中，切面可以使用通用类（基于模式的风格） 或 者在普通类中以 @AspectJ 注解来实现。 </p>
<p><strong>连接点（Join point）</strong>：指方法，在Spring AOP中，一个连接点 总是 代 表一个方法的执行。 应用可能有数以千计的时机应用通知。这些时机被称为连 接点。连接点是在应用执行过程中能够插入切面的一个点。这个点可以是调用方 法时、抛出异常时、甚至修改一个字段时。切面代码可以利用这些点插入到应用 的正常流程之中，并添加新的行为。 </p>
<p><strong>通知（Advice</strong>）：在AOP术语中，切面的工作被称为通知。</p>
<p><strong>切入点（Pointcut）</strong>：切点的定义会匹配通知所要织入的一个或多个连接 点。我们通常使用明确的类和方法名称，或是利用正则表达式定义所匹配的类和 方法名称来指定这些切点。 </p>
<p><strong>引入（Introduction）</strong>：引入允许我们向现有类添加新方法或属性。 </p>
<p><strong>目标对象（Target Object）</strong>： 被一个或者多个切面（aspect）所通知 （advise）的对象。它通常是一个代理对象。也有人把它叫做 被通知 （adviced） 对象。 既然Spring AOP是通过运行时代理实现的，这个对象永远 是一个 被代理（proxied） 对象。 </p>
<p><strong>织入（Weaving）</strong>：织入是把切面应用到目标对象并创建新的代理对象的 过程。在目标对象的生命周期里有多少个点可以进行织入： </p>
<ul>
<li>编译期：切面在目标类编译时被织入。AspectJ的织入编译器是以这种方式织入 切面的。</li>
<li>类加载期：切面在目标类加载到JVM时被织入。需要特殊的类加载器，它可以在 目标类被引入应用之前增强该目标类的字节码。AspectJ5的加载时织入就支持以这种方式织入切面。 </li>
<li>运行期：切面在应用运行的某个时刻被织入。一般情况下，在织入切面时，AOP 容器会为目标对象动态地创建一个代理对象。SpringAOP就是以这种方式织入切 面。</li>
</ul>
<p><strong>测试1：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zht.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zht.service.serviceimp;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImp</span>  <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了添加方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了删除方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.zht.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Advice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了之前的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了之后的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zht.service.serviceimp.UserServiceImp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zht.config.Advice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;advice&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;adpointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.zht.service.serviceimp.UserServiceImp.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;before&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;adpointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;after&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;adpointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试以及结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext-dao.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> (UserService) applicationContext.getBean(<span class="string">&quot;userService&quot;</span>);</span><br><span class="line">    userService.add();</span><br><span class="line">&#125;</span><br><span class="line">结果：</span><br><span class="line">执行了之前的方法</span><br><span class="line">执行了添加方法</span><br><span class="line">执行了之后的方法</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>测试2（注解）:</p>
<ul>
<li>@Before 前置通知，在方法执行之前执行</li>
<li>@After  后置通知，在方法执行之后执行（无论是否发生异常）还不能访问目标方法执行的结果</li>
<li>@AfterRunning 返回通知，在方法正常结束后 返回结果之后执行 可以访问方法的返回值</li>
<li>@AfterThrowing 异常通知，在方法抛出异常之后</li>
<li>@Around 环绕通知，围绕着方法执行</li>
</ul>
<p>修改Advice类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Advice</span> &#123;</span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.zht.service.serviceimp.UserServiceImp.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了之前的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.zht.service.serviceimp.UserServiceImp.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了之后的方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>添加修改xml配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zht.service.serviceimp.UserServiceImp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;advice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.zht.config.Advice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试结果与上面一致。</p>
]]></content>
      <categories>
        <category>Spring</category>
      </categories>
  </entry>
  <entry>
    <title>ArrayList集合</title>
    <url>/2021/09/06/Java%20ArrayList/</url>
    <content><![CDATA[<h1 id="Java-ArrayList"><a href="#Java-ArrayList" class="headerlink" title="Java ArrayList"></a>Java ArrayList</h1><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p>
<p>ArrayList 继承了 AbstractList ，并实现了 List 接口。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2020/06/ArrayList-1-768x406-1.png" alt="img"></p>
<p>ArrayList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import java.util.ArrayList; // 引入 ArrayList 类</span><br><span class="line"></span><br><span class="line">ArrayList&lt;E&gt; objectName =new ArrayList&lt;&gt;();　 // 初始化</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>E</strong>: 泛型数据类型，用于设置 objectName 的数据类型，<strong>只能为引用数据类型</strong>。</li>
<li><strong>objectName</strong>: 对象名。</li>
</ul>
<p>ArrayList 是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</p>
<p>ArrayList 中的元素实际上是对象，一般都是存储的String类型</p>
<p>如果我们要存储其他类型，而 <E> 只能为引用数据类型，这时我们就需要使用到基本类型的包装类。</p>
<p>基本类型对应的包装类表如下：</p>
<table>
<thead>
<tr>
<th align="left">基本类型</th>
<th align="left">引用类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">boolean</td>
<td align="left">Boolean</td>
</tr>
<tr>
<td align="left">byte</td>
<td align="left">Byte</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">Short</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">Integer</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">Long</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">Float</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">Double</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">Character</td>
</tr>
</tbody></table>
<p>此外，BigInteger、BigDecimal 用于高精度的运算，BigInteger 支持任意精度的整数，也是引用类型，但它们没有相对应的基本类型。</p>
<h3 id="ArrayList-排序"><a href="#ArrayList-排序" class="headerlink" title="ArrayList 排序"></a>ArrayList 排序</h3><p>Collections 类也是一个非常有用的类，位于 java.util 包中，提供的 sort() 方法可以对字符或数字列表进行排序。</p>
<ul>
<li><p>import  java.util.Collections; <em>&#x2F;&#x2F; 引入 Collections 类</em></p>
</li>
<li><p>使用Collections.sort(集合名称); <em>&#x2F;&#x2F; 数字排序</em></p>
</li>
</ul>
<h2 id="Java-ArrayList-方法"><a href="#Java-ArrayList-方法" class="headerlink" title="Java ArrayList 方法"></a>Java ArrayList 方法</h2><p>Java ArrayList 常用方法列表如下：</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">add()</td>
<td align="left">将元素插入到指定位置的 arraylist 中</td>
</tr>
<tr>
<td align="left">addAll()</td>
<td align="left">添加集合中的所有元素到 arraylist 中</td>
</tr>
<tr>
<td align="left">clear()</td>
<td align="left">删除 arraylist 中的所有元素</td>
</tr>
<tr>
<td align="left">clone()</td>
<td align="left">复制一份 arraylist</td>
</tr>
<tr>
<td align="left">contains()</td>
<td align="left">判断元素是否在 arraylist</td>
</tr>
<tr>
<td align="left">get()</td>
<td align="left">通过索引值获取 arraylist 中的元素</td>
</tr>
<tr>
<td align="left">indexOf()</td>
<td align="left">返回 arraylist 中元素的索引值</td>
</tr>
<tr>
<td align="left">removeAll()</td>
<td align="left">删除存在于指定集合中的 arraylist 里的所有元素</td>
</tr>
<tr>
<td align="left">remove()</td>
<td align="left">删除 arraylist 里的单个元素</td>
</tr>
<tr>
<td align="left">size()</td>
<td align="left">返回 arraylist 里元素数量</td>
</tr>
<tr>
<td align="left">isEmpty()</td>
<td align="left">判断 arraylist 是否为空</td>
</tr>
<tr>
<td align="left">subList()</td>
<td align="left">截取部分 arraylist 的元素</td>
</tr>
<tr>
<td align="left">set()</td>
<td align="left">替换 arraylist 中指定索引的元素</td>
</tr>
<tr>
<td align="left">sort()</td>
<td align="left">对 arraylist 元素进行排序</td>
</tr>
<tr>
<td align="left">toArray()</td>
<td align="left">将 arraylist 转换为数组</td>
</tr>
<tr>
<td align="left">toString()</td>
<td align="left">将 arraylist 转换为字符串</td>
</tr>
<tr>
<td align="left">ensureCapacity</td>
<td align="left">设置指定容量大小的 arraylist</td>
</tr>
<tr>
<td align="left">lastIndexOf()</td>
<td align="left">返回指定元素在 arraylist 中最后一次出现的位置</td>
</tr>
<tr>
<td align="left">retainAll()</td>
<td align="left">保留 arraylist 中在指定集合中也存在的那些元素</td>
</tr>
<tr>
<td align="left">containsA0ll()</td>
<td align="left">查看 arraylist 是否包含指定集合中的所有元素</td>
</tr>
<tr>
<td align="left">trimToSize()</td>
<td align="left">将 arraylist 中的容量调整为数组中的元素个数</td>
</tr>
<tr>
<td align="left">removeRange()</td>
<td align="left">删除 arraylist 中指定索引之间存在的元素</td>
</tr>
<tr>
<td align="left">replaceAll()</td>
<td align="left">将给定的操作内容替换掉数组中每一个元素</td>
</tr>
<tr>
<td align="left">removeIf()</td>
<td align="left">删除所有满足特定条件的 arraylist 元素</td>
</tr>
<tr>
<td align="left">forEach()</td>
<td align="left">遍历 arraylist 中每一个元素并执行特定操作</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap集合</title>
    <url>/2021/09/06/Java%20HashMap/</url>
    <content><![CDATA[<h1 id="Java-HashMap"><a href="#Java-HashMap" class="headerlink" title="Java HashMap"></a>Java HashMap</h1><p>HashMap 是一个散列表，它存储的内容是键值对(key-value)映射。</p>
<p>HashMap 实现了 Map 接口，根据键的 HashCode 值存储数据，具有很快的访问速度，最多允许一条记录的键为 null，不支持线程同步。</p>
<p>HashMap 是无序的，即不会记录插入的顺序。</p>
<p>HashMap 继承于AbstractMap，实现了 Map、Cloneable、java.io.Serializable 接口。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2020/07/WV9wXLl.png" alt="img"></p>
<p>HashMap 的 key 与 value 类型可以相同也可以不同，可以是字符串（String）类型的 key 和 value，也可以是整型（Integer）的 key 和字符串（String）类型的 value。</p>
<p>HashMap 中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。</p>
<p>基本类型对应的包装类表如下：</p>
<table>
<thead>
<tr>
<th align="left">基本类型</th>
<th align="left">引用类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">boolean</td>
<td align="left">Boolean</td>
</tr>
<tr>
<td align="left">byte</td>
<td align="left">Byte</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">Short</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">Integer</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">Long</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">Float</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">Double</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">Character</td>
</tr>
</tbody></table>
<p>HashMap 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap; <span class="comment">// 引入 HashMap 类</span></span><br></pre></td></tr></table></figure>

<p>以下实例我们创建一个 HashMap 对象 Sites， 整型（Integer）的 key 和字符串（String）类型的 value：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br></pre></td></tr></table></figure>

<h3 id="迭代-HashMap"><a href="#迭代-HashMap" class="headerlink" title="迭代 HashMap"></a>迭代 HashMap</h3><p>可以使用 for-each 来迭代 HashMap 中的元素。</p>
<p>如果你只想获取 key，可以使用 keySet() 方法，然后可以通过 get(key) 获取对应的 value，如果你只想获取 value，可以使用 values() 方法。</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入 HashMap 类    </span></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunoobTest</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 HashMap 对象 Sites</span></span><br><span class="line">    HashMap&lt;Integer, String&gt; Sites = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Integer, String&gt;();</span><br><span class="line">    <span class="comment">// 添加键值对</span></span><br><span class="line">    Sites.put(<span class="number">1</span>, <span class="string">&quot;zht&quot;</span>);</span><br><span class="line">    Sites.put(<span class="number">2</span>, <span class="string">&quot;cj&quot;</span>);</span><br><span class="line">    Sites.put(<span class="number">3</span>, <span class="string">&quot;zhtt&quot;</span>);</span><br><span class="line">    Sites.put(<span class="number">4</span>, <span class="string">&quot;cjjj&quot;</span>);</span><br><span class="line">    <span class="comment">// 输出 key 和 value</span></span><br><span class="line">    <span class="keyword">for</span> (Integer i : Sites.keySet()) &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;key: &quot;</span> + i + <span class="string">&quot; value: &quot;</span> + Sites.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回所有 value 值</span></span><br><span class="line">    <span class="keyword">for</span>(String value: Sites.values()) &#123;</span><br><span class="line">     <span class="comment">// 输出每一个value</span></span><br><span class="line">     System.out.print(value + <span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行以上代码，输出结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">key: <span class="number">1</span> value: zht</span><br><span class="line">key: <span class="number">2</span> value: cj</span><br><span class="line">key: <span class="number">3</span> value: zhtt</span><br><span class="line">key: <span class="number">4</span> value: cjjj</span><br><span class="line">zht, cj, zhtt, cjjj,</span><br></pre></td></tr></table></figure>

<h2 id="Java-HashMap-方法"><a href="#Java-HashMap-方法" class="headerlink" title="Java HashMap 方法"></a>Java HashMap 方法</h2><p>hashmap</p>
<p>Java HashMap 常用方法列表如下：</p>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">clear()</td>
<td align="left">删除 hashMap 中的所有键&#x2F;值对</td>
</tr>
<tr>
<td align="left">clone()</td>
<td align="left">复制一份 hashMap</td>
</tr>
<tr>
<td align="left">isEmpty()</td>
<td align="left">判断 hashMap 是否为空</td>
</tr>
<tr>
<td align="left">size()</td>
<td align="left">计算 hashMap 中键&#x2F;值对的数量</td>
</tr>
<tr>
<td align="left">put()</td>
<td align="left">将键&#x2F;值对添加到 hashMap 中</td>
</tr>
<tr>
<td align="left">putAll()</td>
<td align="left">将所有键&#x2F;值对添加到 hashMap 中</td>
</tr>
<tr>
<td align="left">putIfAbsent()</td>
<td align="left">如果 hashMap 中不存在指定的键，则将指定的键&#x2F;值对插入到 hashMap 中。</td>
</tr>
<tr>
<td align="left">remove()</td>
<td align="left">删除 hashMap 中指定键 key 的映射关系</td>
</tr>
<tr>
<td align="left">containsKey()</td>
<td align="left">检查 hashMap 中是否存在指定的 key 对应的映射关系。</td>
</tr>
<tr>
<td align="left">containsValue()</td>
<td align="left">检查 hashMap 中是否存在指定的 value 对应的映射关系。</td>
</tr>
<tr>
<td align="left">replace()</td>
<td align="left">替换 hashMap 中是指定的 key 对应的 value。</td>
</tr>
<tr>
<td align="left">replaceAll()</td>
<td align="left">将 hashMap 中的所有映射关系替换成给定的函数所执行的结果。</td>
</tr>
<tr>
<td align="left">get()</td>
<td align="left">获取指定 key 对应对 value</td>
</tr>
<tr>
<td align="left">getOrDefault()</td>
<td align="left">获取指定 key 对应对 value，如果找不到 key ，则返回设置的默认值</td>
</tr>
<tr>
<td align="left">forEach()</td>
<td align="left">对 hashMap 中的每个映射执行指定的操作。</td>
</tr>
<tr>
<td align="left">entrySet()</td>
<td align="left">返回 hashMap 中所有映射项的集合集合视图。</td>
</tr>
<tr>
<td align="left">keySet()</td>
<td align="left">返回 hashMap 中所有 key 组成的集合视图。</td>
</tr>
<tr>
<td align="left">values()</td>
<td align="left">返回 hashMap 中存在的所有 value 值。</td>
</tr>
<tr>
<td align="left">merge()</td>
<td align="left">添加键值对到 hashMap 中</td>
</tr>
<tr>
<td align="left">compute()</td>
<td align="left">对 hashMap 中指定 key 的值进行重新计算</td>
</tr>
<tr>
<td align="left">computeIfAbsent()</td>
<td align="left">对 hashMap 中指定 key 的值进行重新计算，如果不存在这个 key，则添加到 hasMap 中</td>
</tr>
<tr>
<td align="left">computeIfPresent()</td>
<td align="left">对 hashMap 中指定 key 的值进行重新计算，前提是该 key 存在于 hashMap 中。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>HashSet集合</title>
    <url>/2021/09/07/Java%20HashSet/</url>
    <content><![CDATA[<h1 id="Java-HashSet"><a href="#Java-HashSet" class="headerlink" title="Java HashSet"></a>Java HashSet</h1><p>HashSet 基于 HashMap 来实现的，是一个不允许有重复元素的集合。</p>
<p>HashSet 允许有 null 值。</p>
<p>HashSet 是无序的，即不会记录插入的顺序。</p>
<p>HashSet 不是线程安全的， 如果多个线程尝试同时修改 HashSet，则最终结果是不确定的。 您必须在多线程访问时显式同步对 HashSet 的并发访问。</p>
<p>HashSet 实现了 Set 接口。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2020/07/java-hashset-hierarchy.png" alt="img"></p>
<p>HashSet 中的元素实际上是对象，一些常见的基本类型可以使用它的包装类。</p>
<p>基本类型对应的包装类表如下：</p>
<table>
<thead>
<tr>
<th align="left">基本类型</th>
<th align="left">引用类型</th>
</tr>
</thead>
<tbody><tr>
<td align="left">boolean</td>
<td align="left">Boolean</td>
</tr>
<tr>
<td align="left">byte</td>
<td align="left">Byte</td>
</tr>
<tr>
<td align="left">short</td>
<td align="left">Short</td>
</tr>
<tr>
<td align="left">int</td>
<td align="left">Integer</td>
</tr>
<tr>
<td align="left">long</td>
<td align="left">Long</td>
</tr>
<tr>
<td align="left">float</td>
<td align="left">Float</td>
</tr>
<tr>
<td align="left">double</td>
<td align="left">Double</td>
</tr>
<tr>
<td align="left">char</td>
<td align="left">Character</td>
</tr>
</tbody></table>
<p>HashSet 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashSet; <span class="comment">// 引入 HashSet 类</span></span><br></pre></td></tr></table></figure>

<p>以下实例我们创建一个 HashSet 对象 sites，用于保存字符串元素：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;String&gt; sites = <span class="keyword">new</span> <span class="title class_">HashSet</span>&lt;String&gt;();</span><br></pre></td></tr></table></figure>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HashSet&lt;String&gt; set=<span class="keyword">new</span> <span class="title class_">HashSet</span>();</span><br><span class="line">       <span class="comment">//添加</span></span><br><span class="line">       set.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">       set.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">       set.add(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">       <span class="comment">//遍历</span></span><br><span class="line">       <span class="keyword">for</span> (String i :set) &#123;</span><br><span class="line">           System.out.println(i);</span><br><span class="line">       &#125;</span><br><span class="line">       Iterator&lt;String&gt; iterator = set.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">           System.out.println(iterator.next());</span><br><span class="line">       &#125;</span><br><span class="line">       set.remove(<span class="number">1</span>);<span class="comment">//移除某个函数</span></span><br><span class="line">       set.clear();<span class="comment">//清空集合元素</span></span><br><span class="line">       System.out.println(set.size());</span><br><span class="line">       <span class="type">boolean</span> flag= set.contains(<span class="string">&quot;2&quot;</span>); <span class="comment">//是否包含</span></span><br><span class="line">       System.out.println(flag);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>集合</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux部署Web应用</title>
    <url>/2021/10/22/Linux%E9%83%A8%E7%BD%B2Web%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="Linux部署Web应用"><a href="#Linux部署Web应用" class="headerlink" title="Linux部署Web应用"></a>Linux部署Web应用</h2><h2 id="一：安装JDK"><a href="#一：安装JDK" class="headerlink" title="一：安装JDK"></a>一：安装JDK</h2><p>1.卸载之前的jdk，openjdk</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum remove *openjdk（卸载之前的jdk）</span><br><span class="line"></span><br><span class="line">java -verion （查看jdk版本）</span><br></pre></td></tr></table></figure>

<p>2.安装自己的jdk</p>
<p>先进入到usr目录下，再新建java文件夹，再到java文件夹中通过rz命令上传jdk文件，在解压</p>
<p>命令步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr </span><br><span class="line">mkdir java </span><br><span class="line">cd java  </span><br><span class="line">输入rz再选择文件直接上传</span><br><span class="line">tar -xvf  tar包名 （解压）</span><br></pre></td></tr></table></figure>

<p>3.配置文件</p>
<p>输入<strong>vim  &#x2F;etc&#x2F;profile</strong></p>
<p>在文件的末尾插入如下配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_181</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib</span><br><span class="line">export JAVA_HOME PATH CLASSPATH</span><br></pre></td></tr></table></figure>

<p>配置完成后直接<strong>esc</strong>然后<strong>：wq</strong>保存并退出</p>
<p>然后执行命令：source &#x2F;etc&#x2F;profile（让配置文件生效）</p>
<p>4.查看jdk版本</p>
<p>java -version</p>
<h2 id="二：安装Tomcat"><a href="#二：安装Tomcat" class="headerlink" title="二：安装Tomcat"></a>二：安装Tomcat</h2><p>1.同样的步骤在usr下新建tomcat文件夹，然后上传解压：</p>
<p>命令步骤：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /usr</span><br><span class="line">mkdir tomcat</span><br><span class="line">rz （选择tomcat文件直接上传）</span><br><span class="line">tar -xvf tomcat.tar文件</span><br></pre></td></tr></table></figure>

<p>2.配置文件</p>
<p>vim &#x2F;etc&#x2F;profile</p>
<p>将刚才的java配置文件与其合并</p>
<p>新配置文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export JAVA_HOME=/usr/java/jdk1.8.0_181</span><br><span class="line">export CATALINA_HOME=/usr/tomcat/apache-tomcat-7.0.56</span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin:$CATALINA_HOME/bin</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$CATALINA_HOME/lib</span><br><span class="line">export JAVA_HOME PATH CLASSPATH CATALINA_HOME</span><br></pre></td></tr></table></figure>

<p>3.进入 apache-tomcat-7.0.56中的bin目录</p>
<p>startup.sh命令启动</p>
<p>shutdown.sh 命令关闭</p>
<p>在访问tomcat时，首先关闭防火墙或者放行端口</p>
<p>systemctl stop firewalld 关闭防火墙</p>
<p>输入IP地址：8080即可访问</p>
<h2 id="三：安装mysql"><a href="#三：安装mysql" class="headerlink" title="三：安装mysql"></a>三：安装mysql</h2><p>在这里安装的是的mariadb，与mysql语法差不多一模一样</p>
<p>安装地址教程：<a href="https://blog.51cto.com/u_13866901/2177779">https://blog.51cto.com/u_13866901/2177779</a></p>
<p>安装完成后：</p>
<ol>
<li>在usr目录下新建sqlscript，并且将sql脚本文件rz上传进来</li>
<li>输入mysql -uroot -p 命令登录并且会提示你输入密码，密码输入成功后就可以输入sql了</li>
<li>create dadabase  数据库名</li>
<li>use 数据库名</li>
<li>source  &#x2F;sql脚本所在位置</li>
</ol>
<h2 id="四：启动web项目"><a href="#四：启动web项目" class="headerlink" title="四：启动web项目"></a>四：启动web项目</h2><p>上述步骤完成后，进入到tomcat的webapps下，将web项目先打包成.war文件，然后通过rz命令上传到bin目录下，然后启动tomcat就可以访问了！</p>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
  </entry>
  <entry>
    <title>Redis常用指令</title>
    <url>/2021/11/06/Redis%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="Redis常用指令"><a href="#Redis常用指令" class="headerlink" title="Redis常用指令"></a>Redis常用指令</h1><p>select   Index(默认16个库,从0开始，默认为0)</p>
<p>dbsize (查看当前库的key的数量)</p>
<p>keys * （查看当前数据库具体的key）</p>
<p>flushdb (清空当前库)</p>
<p>flushall (清空全部的库)</p>
<h2 id="1-字符串String"><a href="#1-字符串String" class="headerlink" title="1.字符串String"></a>1.字符串String</h2><p>set key1 value1（设置值）</p>
<p>get key1 （获得key）</p>
<p>del key1 （删除key）</p>
<p>exists key1 （判断是否存在key）</p>
<p>append key1 （对不存在的 key 进行 APPEND ，等同于 SET   key1  “hello” ，否则追加字符串）</p>
<p>strlen key1 （获取字符串长度）</p>
<p>incr  views （将views所对应的值+1）</p>
<p>decr  views （将views所对应的值-1）</p>
<p>incrby  views  2 （将views所对应的值+2）</p>
<p>decrby views  2（将views所对应的值-2）</p>
<p>getrange  key2 0 -1 （获取全部字符串）</p>
<p>getrange  key2 0  2 （截取部分字符串）</p>
<p>setrange  key2  1  2  （替换值）</p>
<p>setex key3 60 expire （设置过期时间）</p>
<p>ttl key3 （查看过期时间）</p>
<p>setnx  mykey  “Redis” （如果不存在设置返回1，否则返回0）</p>
<p>mget k1 k2 k3 （存在的就返回key的值，不存在的就返回nil）</p>
<p>mset k1 v1 k2 v2 (同时设置多个键值对)</p>
<p>msetnx   k1 v1  k3 v2 (如果都设置成功，返回1，如果所有给定 key 都设置失败(至少有一个 key 已存在)，那么返回 0 ，原子性操作)</p>
<p>getset  k1 v2 (先返回v1的值再设置成v2)</p>
<h2 id="2-列表List"><a href="#2-列表List" class="headerlink" title="2.列表List"></a>2.列表List</h2><p>lpush list1 value （从列表左边插入）</p>
<p>rpush list1 value （从列表右边插入）</p>
<p>lrange list1 0 -1 （返回全部值）</p>
<p>lrange list1 0 1 （返回下标从0到1的值）</p>
<p>lpop list1 （移除最左边并返回该值，不存在时返回nil）</p>
<p>rpop list1 （移除最右边并返回该值，不存在时返回nil）</p>
<p>lindex list  0  （按照索引下标获得元素（-1代表最后一个，0代表是第一个））</p>
<p>llen list （返回列表的长度）</p>
<p>lrem list  1  “zht” (根据参数 COUNT 的值，移除列表中与参数 VALUE 相等的元素。)</p>
<p>ltirm list  1 2 ( 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。)</p>
<p>rpoplpush  mylist  myotherlist  “bar” (移除列表的最后一个元素，并将该元素添加到另一个列表并返回。)</p>
<p>lset key index value (将列表 key 下标为 index 的元素的值设置为 value 。 )</p>
<p>linsert key before&#x2F;after pivot value (用于在列表的元素前或者后插入元素。)</p>
<h2 id="3-集合Set"><a href="#3-集合Set" class="headerlink" title="3.集合Set"></a>3.集合Set</h2><p>sadd myset value（将一个或多个成员元素加入到集合中，不能重复）</p>
<p>smembers myset （返回集合中的所有的成员。）</p>
<p>sismember myset value （命令判断成员元素是否是集合的成员。）</p>
<p>scard myset （获取集合里面的元素个数）</p>
<p>srem key value （用于移除集合中的一个或多个成员元素）</p>
<p>srandmember key （命令用于返回集合中的一个随机元素。后面可以加数字，表示返回几个）</p>
<p>spop key （用于移除集合中的指定 key 的一个或多个随机元素）</p>
<p>smove myset myset2 “zht”   （ 将指定成员 member 元素从 source 集合移动到 destination 集合。）</p>
<p>SDIFF key1 key2  （差集）</p>
<p>SINTER key1 key2 # （交集）</p>
<p>SUNION key1 key2 （并集）</p>
<h2 id="4-哈希Hash（kv模式不变，但V是一个键值对）"><a href="#4-哈希Hash（kv模式不变，但V是一个键值对）" class="headerlink" title="4.哈希Hash（kv模式不变，但V是一个键值对）"></a>4.哈希Hash（kv模式不变，但V是一个键值对）</h2><p>hset  myhash k1 v1(命令用于为哈希表中的字段赋值)</p>
<p>hget myhash k1 </p>
<p>hmset   myhash k1 v1 k2 v2(同时将多个k-v对设置到哈希表中。会覆盖哈希表中已存在的字段)</p>
<p>hmget myhash k1  k2</p>
<p>hgetall myhash (用于返回哈希表中，所有的字段和值。)</p>
<p>hdel  myhash k1 (用于删除哈希表 key 中的一个或多个指定字段)</p>
<p>hlen  myhash (获取哈希表中字段的数量。)</p>
<p>hexists myhash k1 (查看哈希表的指定字段是否存在。 )</p>
<p>hkeys  myhash( 获取哈希表中的所有域)</p>
<p>hvals myhash  (返回哈希表所有域的值)</p>
<p>hincrby  myhash num  1 (为哈希表中的字段值加上指定增量值。)</p>
<p>hsetnx  myhash k10  “zht” (为哈希表中不存在的的字段赋值 。)  </p>
<h2 id="5-有序集合（在set基础上，加一个score值。之前set是k1-v1-v2-v3，现在zset是-k1-score1-v1-score2-v2）"><a href="#5-有序集合（在set基础上，加一个score值。之前set是k1-v1-v2-v3，现在zset是-k1-score1-v1-score2-v2）" class="headerlink" title="5.有序集合（在set基础上，加一个score值。之前set是k1 v1 v2 v3，现在zset是 k1 score1 v1 score2 v2）"></a>5.有序集合（在set基础上，加一个score值。之前set是k1 v1 v2 v3，现在zset是 k1 score1 v1 score2 v2）</h2><p>zadd myset 分数值  “zht”  （将一个或多个成员元素及其分数值加入到有序集当中。） </p>
<p>zrange  myset 0 -1  （返回有序集中，指定区间内的成员 ，-1为全部）</p>
<p>ZRANGEBYSCORE  myset -inf  +inf（显示整个有序集）</p>
<p>ZRANGEBYSCORE myset -inf +inf withscores  （递增排序）</p>
<p>ZRANGEBYSCORE myset 0 -1 withscores  （递剪排序）</p>
<p>ZRANGEBYSCORE myset -inf 2500 WITHSCORES （显示小于2500的成员）</p>
<p>zrem myset “zht” （移除有序集中的一个或多个成员 ）</p>
<p>zcard myset  （命令用于计算集合中元素的数量。）</p>
<p>zcount myset 1  3 （计算有序集合中指定分数区间的成员数量。）</p>
<p> zrank  myset  “zht” （返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列。 ）</p>
<p>zrevrank  myset  “zht” （返回有序集中成员的排名。其中有序集成员按分数值递减(从大到小)排序。） </p>
<h2 id="6-其他类型"><a href="#6-其他类型" class="headerlink" title="6.其他类型"></a>6.其他类型</h2><p>GEO地理位置</p>
<p>HyperLogLog</p>
<p>BitMap</p>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Redis事务</title>
    <url>/2021/11/07/Redis%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><p><strong>概念</strong></p>
<p>Redis 事务的本质是一组命令的集合。事务支持一次执行多个命令，一个事务中所有命令都会被序列</p>
<p>化。在事务执行过程，会按照顺序串行化执行队列中的命令，其他客户端提交的命令请求不会插入到事</p>
<p>务执行命令序列中。redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</p>
<p><strong>注意：</strong></p>
<ul>
<li>批量操作在发送 EXEC 命令前被放入队列缓存，并不会被实际执行！</li>
<li>Redis中，单条命令是原子性执行的，但事务不保证原子性，且没有回滚。事务中任意命令执行失败，其余的命令仍会被执行。</li>
</ul>
<p><strong>相关命令：</strong></p>
<ol>
<li>watch key1 key2 … 监视一或多个key,如果在事务执行之前，被监视的key被其他命令改动，则 事务被打断 （ 类似乐观锁 ） </li>
<li>multi 标记一个事务块的开始（ queued ） </li>
<li>exec 执行所有事务块的命令 （ 一旦执行exec后，之前加的监控锁都会被取消掉 ） </li>
<li>discard  在执行exec命令之前，取消事务，放弃事务块中的所有命令，如果不取消事务再次执行 multi 会报错（”ERR MULTI calls can not be nested”）</li>
<li>unwatch  取消watch对所有key的监控</li>
</ol>
<p><strong>简单操作：</strong></p>
<p><a href="https://imgtu.com/i/7pugAO"><img src="https://s4.ax1x.com/2022/01/07/7pugAO.png" alt="7pugAO.png"></a></p>
<p><strong>补充：</strong></p>
<ul>
<li>若事务队列中存在命令性错误（类似于java编译性错误），则执行EXEC命令时，所有命令都不会执行</li>
<li>若事务队列中存在语法性错误（类似于java的1&#x2F;0的运行时异常），执行EXEC命令时，其他正确命令被执行，错误命令抛出异常。</li>
</ul>
<p><strong>watch</strong>：</p>
<ol>
<li><p>使用watch监听某个key时，如果在执行exec命令前被改动了，那么exec执行后事务执行回滚操作。</p>
</li>
<li><p>一但执行 EXEC 开启事务的执行后，无论事务使用执行成功， WARCH 对变量的监控都将被取消。故当事务执行失败后，需重新执行WATCH命令对变量进行监控，并开启新的事务进行操作。</p>
</li>
<li><p>watch指令类似于乐观锁，在事务提交时，如果watch监控的多个KEY中任何KEY的值已经被其他客户端更改，则使用EXEC执行事务时，事务队列将不会被执行，同时返回Nullmulti-bulk应答以通知调用者事务执行失败。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>Mysql常用sql语句</title>
    <url>/2021/08/24/Mysql%E5%B8%B8%E7%94%A8sql%E8%AF%AD%E5%8F%A5/</url>
    <content><![CDATA[<h2 id="Mysql常用sql语句"><a href="#Mysql常用sql语句" class="headerlink" title="Mysql常用sql语句"></a>Mysql常用sql语句</h2><table>
<thead>
<tr>
<th align="left"><strong>结构化查询语句分类</strong></th>
<th align="left"></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td align="left">DDL（数据定义语言）定义和管理数据对象，如数据库，数据表等</td>
<td align="left">CREATE、DROP、ALTER</td>
<td></td>
</tr>
<tr>
<td align="left">DML（数据操作语言）用于操作数据库对象中所包含的数据</td>
<td align="left">INSERT、UPDATE、DELETE</td>
<td></td>
</tr>
<tr>
<td align="left">DQL（数据查询语言）用于查询数据库数据</td>
<td align="left">SELECT</td>
<td></td>
</tr>
<tr>
<td align="left">DCL（数据控制语言）用于管理数据库的语言，包括管理权限及数据更改</td>
<td align="left">GRANT、commit、 rollback</td>
<td></td>
</tr>
<tr>
<td align="left"></td>
<td align="left"></td>
<td></td>
</tr>
</tbody></table>
<p><strong>创建数据库</strong> : create database [if not exists] 数据库名</p>
<p><strong>删除数据库</strong> : drop database [if exists] 数据库名</p>
<p><strong>查看数据库</strong> : show databases</p>
<p><strong>使用数据库</strong> : use 数据库名</p>
<p><strong>修改表名</strong> : ALTER TABLE 旧表名 RENAME AS 新表名</p>
<p><strong>添加字段</strong> : ALTER TABLE 表名 ADD字段名 列属性[属性]</p>
<p><strong>修改字段</strong> :ALTER TABLE 表名 MODIFY 字段名 列类型[属性] </p>
<p>​                    ALTER TABLE 表名 CHANGE 旧字段名 新字段名 列属性[属性]</p>
<p><strong>删除字段</strong> : ALTER TABLE 表名 DROP 字段名</p>
<p><strong>删除数据表</strong>：DROP TABLE [IF EXISTS] 表名 </p>
<p><strong>添加数据</strong>：INSERT INTO 表名(字段1,字段2,字段3,…)VALUES(‘值1’,’值2’,’值3’) </p>
<p><strong>修改数据</strong>：UPDATE 表名 SET column_name&#x3D;value [,column_name2&#x3D;value2,…] [WHERE 条件];</p>
<p><strong>删除数据</strong>：DELETE FROM 表名 [WHERE condition]; （condition为筛选条件 , 如不指定则删除该表的所有列数据）</p>
<p>​                      TRUNCATE [TABLE] table_name; （用于完全清空表数据 , 但表结构 , 索引 , 约束等不变）</p>
<p>​                      与DELETE的区别：相同：都能删除数据 , 不删除表结构 , 但TRUNCATE速度更快</p>
<p>​                                                            不相同：使用TRUNCATE TABLE 重新设置AUTO_INCREMENT计数器，不会对事务有影响</p>
<p><strong>查询数据</strong>：</p>
<p>​                                  <strong>语法</strong>：SELECT [ALL | DISTINCT] </p>
<p>​                                  {* | table.* | [table.field1[as alias1][,table.field2[as alias2]][,…]]} </p>
<p>​                                  FROM table_name [as table_alias] </p>
<p>​                                  [left | right | inner join table_name2] – 联合查询 </p>
<p>​                                  [WHERE …] – 指定结果需满足的条件 </p>
<p>​                                  [GROUP BY …] – 指定结果按照哪几个字段来分组 </p>
<p>​                                  [HAVING] – 过滤分组的记录必须满足的次要条件 </p>
<p>​                                  [ORDER BY …] – 指定查询记录按一个或多个条件排序 </p>
<p>​                                  [LIMIT {[offset,]row_count | row_countOFFSET offset}];– 指定查询的记录从哪条至哪条</p>
<p>​                                  <strong>注意：一定要注意关键字顺序！ [ ] 括号代表可选的 , { }括号代表必选得）</strong></p>
<p>​                     举例： SELECT studentno AS 学号,studentname AS 姓名 FROM student（AS为了起别名，可以省略）</p>
<p>​                                   SELECT CONCAT(‘姓名:’,studentname) AS 新姓名 FROM student; （concat字符串拼接）</p>
<p>​                                  SELECT DISTINCT studentno FROM result; (DISTINCT 去除重复项 , (默认是ALL) )</p>
<h2 id="连接查询："><a href="#连接查询：" class="headerlink" title="连接查询："></a><strong>连接查询</strong>：</h2><table>
<thead>
<tr>
<th>操作符名称</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>INNER  JOIN</td>
<td>如果表中有至少一个匹配，则返回行(查询两个表中的结果集中的交集)</td>
</tr>
<tr>
<td>LEFT  JOIN</td>
<td>即使右表中没有匹配，也从左表中返回所有的行 (以左表作为基准,右边表来一一匹配,匹配不上的,返回左表的记录,右表以NULL填充)</td>
</tr>
<tr>
<td>RIGHT JOIN</td>
<td>即使左表中没有匹配，也从右表中返回所有的行(以右表作为基准,左边表来一一匹配,匹配不上的,返回右表的记录,左表以NULL填充)</td>
</tr>
</tbody></table>
<p>  <strong>举例</strong>：SELECT s.studentno,studentname,subjectno,StudentResult </p>
<p>​               FROM student s </p>
<p>​               LEFT JOIN result r </p>
<p>​               ON r.studentno &#x3D; s.studentno （几种连接使用相似，视情况而定）</p>
<p><strong>子查询</strong>：(在查询语句中的WHERE条件子句中,又嵌套了另一个查询语句 嵌套查询可由多个子查询组成,求解的方式是由里及外; </p>
<p>​                   子查询返回的结果一般都是集合,故而建议使用IN关键字)</p>
<p>​                <strong>举例</strong>： SELECT r.studentno,studentname FROM student s </p>
<p>​                              INNER JOIN result r ON s.StudentNo&#x3D;r.StudentNo</p>
<p>​                              WHERE StudentResult&gt;&#x3D;80 AND subjectno&#x3D;( </p>
<p>​                              SELECT subjectno FROM SUBJECT </p>
<p>​                              WHERE subjectname &#x3D; ‘高等数学’ )</p>
<h2 id="WHERE条件："><a href="#WHERE条件：" class="headerlink" title="WHERE条件："></a><strong>WHERE条件</strong>：</h2><table>
<thead>
<tr>
<th><strong>操作符名称</strong></th>
<th><strong>语法</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>AND 或 &amp;&amp;</td>
<td>a AND b 或 a &amp;&amp; b</td>
<td>逻辑与，同时为真结果才为真</td>
</tr>
<tr>
<td>OR 或 ||</td>
<td>a OR b 或 a||b</td>
<td>逻辑或，只要一个为真，则结果为真</td>
</tr>
<tr>
<td>NOT 或 ！</td>
<td>NOT a 或 ！a</td>
<td>逻辑非，若操作数为假，则结果为真！</td>
</tr>
</tbody></table>
<h2 id="MYSQL函数："><a href="#MYSQL函数：" class="headerlink" title="MYSQL函数："></a><strong>MYSQL函数</strong>：</h2><p><strong>数值函数</strong> </p>
<p>abs(x) – 绝对值 abs(-10.9) &#x3D; 10 </p>
<p>format(x, d) – 格式化千分位数值 format(1234567.456, 2) &#x3D; 1,234,567.46 </p>
<p>ceil(x) – 向上取整 ceil(10.1) &#x3D; 11 </p>
<p>floor(x) – 向下取整 floor (10.1) &#x3D; 10 </p>
<p>round(x) – 四舍五入去整 </p>
<p>mod(m, n) – m%n m mod n 求余 10%3&#x3D;1 </p>
<p>pi() – 获得圆周率 </p>
<p>pow(m, n) – m^n </p>
<p>sqrt(x) – 算术平方根 </p>
<p>rand() – 随机数 </p>
<p>truncate(x, d) – 截取d位小数 </p>
<p><strong>时间日期函数</strong> </p>
<p>now(), current_timestamp(); – 当前日期时间 </p>
<p>current_date(); – 当前日期 </p>
<p>current_time(); – 当前时间 </p>
<p>date(‘yyyy-mm-dd hh:ii:ss’); – 获取日期部分 </p>
<p>time(‘yyyy-mm-dd hh:ii:ss’); – 获取时间部分 </p>
<p>date_format(‘yyyy-mm-dd hh:ii:ss’, ‘%d %y %a %d %m %b %j’); – 格式化时间 </p>
<p>unix_timestamp(); – 获得unix时间戳 </p>
<p>from_unixtime(); – 从时间戳获得时间 </p>
<p><strong>字符串函数</strong> </p>
<p>length(string) – string长度，字节 </p>
<p>char_length(string) – string的字符个数 </p>
<p>substring(str, position [,length]) – 从str的position开始,取length个字符 </p>
<p>replace(str ,search_str ,replace_str) – 在str中用replace_str替换search_str </p>
<p>instr(string ,substring) – 返回substring首次在string中出现的位置 </p>
<p>concat(string [,…]) – 连接字串 </p>
<p>charset(str) – 返回字串字符集 </p>
<p>lcase(string) – 转换成小写 </p>
<p>left(string, length) – 从string2中的左边起取length个字符 </p>
<p>load_file(file_name) – 从文件读取内容 </p>
<p>locate(substring, string [,start_position]) – 同instr,但可指定开始位置 </p>
<p>lpad(string, length, pad) – 重复用pad加在string开头,直到字串长度为length </p>
<p>ltrim(string) – 去除前端空格 </p>
<p>repeat(string, count) – 重复count次 </p>
<p>rpad(string, length, pad) –在str后用pad补充,直到长度为length </p>
<p>rtrim(string) – 去除后端空格 </p>
<p>strcmp(string1 ,string2) – 逐字符比较两字串大小 </p>
<p><strong>聚合函数</strong></p>
<p>count()  查询条数</p>
<p>sum(); 求和</p>
<p>max(); 最大值</p>
<p>min(); 最小值</p>
<p>avg(); 平均值</p>
<p><strong>其他常用函数</strong> </p>
<p>md5();  加密</p>
<p>default(); </p>
<h2 id="常用Mysql语句举例："><a href="#常用Mysql语句举例：" class="headerlink" title="常用Mysql语句举例："></a><strong>常用Mysql语句举例</strong>：</h2><h5 id="1、select-from-ren"><a href="#1、select-from-ren" class="headerlink" title="1、select * from ren"></a>1、select * from ren</h5><p>​		列表查询（全查） select：表示查询，*表示默认查询全部字段 from：表示要查询哪一个表 ren（表名）</p>
<h5 id="2、select-from-ren-where-p-id-x3D-’p001’"><a href="#2、select-from-ren-where-p-id-x3D-’p001’" class="headerlink" title="2、select * from ren where p_id&#x3D;’p001’"></a>2、select * from ren where p_id&#x3D;’p001’</h5><p>​		条件查询：where关键字表示条件，后面跟具体的过滤条件<br>​			p_id&#x3D;’p001’字段值以单引号包裹，对于int类型字段做条件时，其值可以不用单引号包裹，也可以包裹</p>
<h5 id="3、select-p-name-p-age-from-ren"><a href="#3、select-p-name-p-age-from-ren" class="headerlink" title="3、select p_name,p_age from ren"></a>3、select p_name,p_age from ren</h5><p>​		选择性查询（查询某一部分字段），将列表查询中的*替换为要查的字段，查询多个字段时，字段与字段之间用“，”间隔</p>
<h5 id="4、select-from-ren-where-p-age-gt-20"><a href="#4、select-from-ren-where-p-age-gt-20" class="headerlink" title="4、select * from ren where p_age&gt;20"></a>4、select * from ren where p_age&gt;20</h5><p>​		以运算符为条件的查询，常用的：&gt;, &lt;,&lt;&#x3D;,&gt;&#x3D;,!&#x3D;,&lt;&gt;(表示不等于)</p>
<h5 id="5、select-from-ren-where-p-age-gt-20-or-p-age-lt-40"><a href="#5、select-from-ren-where-p-age-gt-20-or-p-age-lt-40" class="headerlink" title="5、select * from ren where p_age&gt;20 or p_age&lt;40"></a>5、select * from ren where p_age&gt;20 or p_age&lt;40</h5><p>​		多条件查询，链接条件的关键字：and&#x2F;or and表示逻辑与，两边同时满足；or表示逻辑或，两边满足其中之一</p>
<h5 id="6、select-from-ren-where-p-id-x3D-select-p-leader-from-ren-where-p-name-x3D-’周芷若’"><a href="#6、select-from-ren-where-p-id-x3D-select-p-leader-from-ren-where-p-name-x3D-’周芷若’" class="headerlink" title="6、select * from ren where p_id&#x3D;(select p_leader from ren where p_name&#x3D;’周芷若’)"></a>6、select * from ren where p_id&#x3D;(select p_leader from ren where p_name&#x3D;’周芷若’)</h5><p>​		子条件查询，注意：子语句所查结果需为单一字段结果</p>
<h5 id="7、select-from-ren-where-p-name-like-‘-王-’"><a href="#7、select-from-ren-where-p-name-like-‘-王-’" class="headerlink" title="7、select * from ren where p_name like ‘%王%’"></a>7、select * from ren where p_name like ‘%王%’</h5><p>​		模糊查询，关键字：like表示模糊，查询条件以’%值%’包裹<br>​		注意：like ‘王%’ 表示以王开头的所有数据<br>​		      like ‘%王’ 表示以王结尾的所有数据<br>​		      like ‘%王%’表示字段含有王的所有数据</p>
<h5 id="8、select-from-ren-where-p-menpai-in-‘明教’-’峨眉’"><a href="#8、select-from-ren-where-p-menpai-in-‘明教’-’峨眉’" class="headerlink" title="8、select * from ren where p_menpai in(‘明教’,’峨眉’)"></a>8、select * from ren where p_menpai in(‘明教’,’峨眉’)</h5><p>​		以集合方式查询，语句等同于select * from ren where p_menpai&#x3D;’明教’ or p_menpai&#x3D;’峨眉’<br>​			关键字：in(‘’,’’),小括号中为要查询的条件的集合</p>
<h5 id="9、select-from-ren-where-p-age-between-20-and-70"><a href="#9、select-from-ren-where-p-age-between-20-and-70" class="headerlink" title="9、select * from ren where p_age between 20 and 70"></a>9、select * from ren where p_age between 20 and 70</h5><p>​		按区间查询，等同于<strong>select * from ren where p_age&gt;&#x3D;20 and p_age&lt;&#x3D;70</strong><br>​			关键字：between and,查询方式：between 值1 and 值2</p>
<h5 id="10、select-from-ren-order-by-p-age-asc"><a href="#10、select-from-ren-order-by-p-age-asc" class="headerlink" title="10、select * from ren order by p_age asc"></a>10、select * from ren order by p_age asc</h5><p>​		排序，关键字：order by,后面跟字段（要排序的字段）<br>​		asc:正序（从小到大）<br>​		desc:倒序（从大到小）</p>
<h5 id="11、select-from-ren-where-p-leader-is-null"><a href="#11、select-from-ren-where-p-leader-is-null" class="headerlink" title="11、select * from ren where p_leader is null"></a>11、select * from ren where p_leader is null</h5><p>​		查询字段值默认为空状态的数据，若果手动填充null值，则按照正常方式查询<br>​		如果字段值为空，查询方式按照正常方式来查询（’’）</p>
<h5 id="12、select-from-ren-limit-9-3"><a href="#12、select-from-ren-limit-9-3" class="headerlink" title="12、select * from ren limit 9,3"></a>12、select * from ren limit 9,3</h5><p>​		分页查询，关键字limit 数据1，数据2； 数据1表示从第几条开始查询，数据2表示每页显示（查询）多少条<br>​		注意：数据1从0开始<br>​		注意：如果只写一个数据，默认为从第0条开始查询，每页显示数据条数</p>
<h5 id="13、select-distinct-p-menpai-from-ren-where-p-menpai-x3D-’明教’"><a href="#13、select-distinct-p-menpai-from-ren-where-p-menpai-x3D-’明教’" class="headerlink" title="13、select distinct(p_menpai) from ren where p_menpai&#x3D;’明教’"></a>13、select distinct(p_menpai) from ren where p_menpai&#x3D;’明教’</h5><p>​		取唯一，关键字distinct(要区唯一的字段)</p>
<h5 id="14、select-max-p-age-from-ren"><a href="#14、select-max-p-age-from-ren" class="headerlink" title="14、select max(p_age) from ren"></a>14、select max(p_age) from ren</h5><p>​	求最大值，关键字max(需要求最大值的字段名称)</p>
<h5 id="15、select-min-p-age-from-ren"><a href="#15、select-min-p-age-from-ren" class="headerlink" title="15、select min(p_age) from ren"></a>15、select min(p_age) from ren</h5><p>​	求最小值，关键字min(需要求最小值的字段名称)</p>
<h5 id="16、select-avg-p-age-from-ren"><a href="#16、select-avg-p-age-from-ren" class="headerlink" title="16、select avg(p_age) from ren"></a>16、select avg(p_age) from ren</h5><p>​	求平均值，关键字avg(需要求平均值的字段名称)</p>
<h5 id="17、select-sum-p-age-from-ren"><a href="#17、select-sum-p-age-from-ren" class="headerlink" title="17、select sum(p_age) from ren"></a>17、select sum(p_age) from ren</h5><p>​	求和，关键字sum(需要求和的字段名称)</p>
<h5 id="18、select-count-from-ren"><a href="#18、select-count-from-ren" class="headerlink" title="18、select count(*) from ren"></a>18、select count(*) from ren</h5><p>​	统计当前表格的行数<br>注意：以上聚合函数针对于int类型的字段</p>
<h5 id="18、select-from-ren-group-by-p-menpai"><a href="#18、select-from-ren-group-by-p-menpai" class="headerlink" title="18、select * from ren group by p_menpai"></a>18、select * from ren group by p_menpai</h5><p>​	分组函数，将属于同一组的数据合并起来只显示其中一条，关键字group by，后面跟以哪一个字段进行分组<br>​	分组函数一般与聚合函数一起使用</p>
<h5 id="19、select-avg-p-age-p-menpai-from-ren-group-by-p-menpai-having-avg-p-age-gt-30"><a href="#19、select-avg-p-age-p-menpai-from-ren-group-by-p-menpai-having-avg-p-age-gt-30" class="headerlink" title="19、select avg(p_age),p_menpai from ren group by p_menpai having avg(p_age)&gt;30"></a>19、select avg(p_age),p_menpai from ren group by p_menpai having avg(p_age)&gt;30</h5><p>​	分组函数加条件查询，关键字（分组函数专用的条件关键字）having，后面一般跟聚合函数做条件</p>
<h5 id="20、select-p-name-as-name-from-ren"><a href="#20、select-p-name-as-name-from-ren" class="headerlink" title="20、select p_name as name from ren"></a>20、select p_name as name from ren</h5><p>​	别名：关键字：as,作用：为查询结果起一个别名<br>​	注意：默认as可以省略</p>
<h5 id="21、select-from-ren-wei-where-ren-p-wei-x3D-wei-w-name"><a href="#21、select-from-ren-wei-where-ren-p-wei-x3D-wei-w-name" class="headerlink" title="21、select * from ren,wei where ren.p_wei&#x3D;wei.w_name"></a>21、select * from ren,wei where ren.p_wei&#x3D;wei.w_name</h5><p>​	多表联合查询，所查询到的结果为两表数据的乘积（笛卡尔乘积），需要加入where条件进行过滤<br>​		过滤方式：表1.字段名称&#x3D;表2.字段名称<br>​	注意：表与表之间用,间隔</p>
<h5 id="22、select-from-ren-left-join-wei-on-ren-p-wei-x3D-wei-w-name"><a href="#22、select-from-ren-left-join-wei-on-ren-p-wei-x3D-wei-w-name" class="headerlink" title="22、select * from ren left join wei on ren.p_wei&#x3D;wei.w_name"></a>22、select * from ren left join wei on ren.p_wei&#x3D;wei.w_name</h5><p>​	左连接查询，以左表为准，左表数据全部留下，右表的数据进行匹配，如果没有相匹配的数据则以null填充</p>
<h5 id="23、select-from-ren-right-join-wei-on-ren-p-wei-x3D-wei-w-name"><a href="#23、select-from-ren-right-join-wei-on-ren-p-wei-x3D-wei-w-name" class="headerlink" title="23、select * from ren right join wei on ren.p_wei&#x3D;wei.w_name"></a>23、select * from ren right join wei on ren.p_wei&#x3D;wei.w_name</h5><p>​	右连接查询，匹配原则与左联相反</p>
<h5 id="24、select-from-ren-inner-join-wei-on-ren-p-wei-x3D-wei-w-name"><a href="#24、select-from-ren-inner-join-wei-on-ren-p-wei-x3D-wei-w-name" class="headerlink" title="24、select * from ren inner join wei on ren.p_wei&#x3D;wei.w_name"></a>24、select * from ren inner join wei on ren.p_wei&#x3D;wei.w_name</h5><p>​	内连接查询，两表数据相互匹配，如果有不能匹配数据则全部清除<br>​	on在left&#x2F;right&#x2F;inner时的条件关键字，后面跟过滤数据的语句</p>
<h5 id="25、insert-into-ren-p-id-p-name-p-sex-p-age-values-‘p012’-’金毛狮王’-’男’-23"><a href="#25、insert-into-ren-p-id-p-name-p-sex-p-age-values-‘p012’-’金毛狮王’-’男’-23" class="headerlink" title="25、insert into ren (p_id,p_name,p_sex,p_age) values (‘p012’,’金毛狮王’,’男’,23)"></a>25、insert into ren (p_id,p_name,p_sex,p_age) values (‘p012’,’金毛狮王’,’男’,23)</h5><p>​	新增，insert into (字段名称，字段名称,…) values (‘’,’’,’’,…)<br>​	注意：字段名称与第二个括号中的值必须一一对应</p>
<h5 id="26、update-ren-set-p-leader-x3D-’p002’-p-menpai-x3D-’明教’-where-p-id-x3D-’p011’"><a href="#26、update-ren-set-p-leader-x3D-’p002’-p-menpai-x3D-’明教’-where-p-id-x3D-’p011’" class="headerlink" title="26、update ren set p_leader&#x3D;’p002’,p_menpai&#x3D;’明教’ where p_id&#x3D;’p011’"></a>26、update ren set p_leader&#x3D;’p002’,p_menpai&#x3D;’明教’ where p_id&#x3D;’p011’</h5><p>​	修改：update 表名 set 字段1&#x3D;’’,字段2&#x3D;’’,…where 主键&#x3D;’’</p>
<h5 id="27、delete-from-ren-where-p-id-x3D-’p011’"><a href="#27、delete-from-ren-where-p-id-x3D-’p011’" class="headerlink" title="27、delete from ren where p_id&#x3D;’p011’"></a>27、delete from ren where p_id&#x3D;’p011’</h5><p>​	删除：delete from 表名 where 主键&#x3D;’’</p>
<p>​                 </p>
]]></content>
      <categories>
        <category>Mysql</category>
      </categories>
  </entry>
  <entry>
    <title>SSM项目基本配置</title>
    <url>/2021/08/31/SSM%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>maven项目项目结构图：</p>
<p><a href="https://imgtu.com/i/4CUaMF"><img src="https://z3.ax1x.com/2021/09/13/4CUaMF.png" alt="4CUaMF.png"></a></p>
<h3 id="1-pom-xml基本配置如下："><a href="#1-pom-xml基本配置如下：" class="headerlink" title="1.pom.xml基本配置如下："></a>1.pom.xml基本配置如下：</h3><pre><code>  &lt;properties&gt;
    &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;
    &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt;
    &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;
    &lt;spring.version&gt;4.1.4.RELEASE&lt;/spring.version&gt;
    &lt;jackson.version&gt;2.5.0&lt;/jackson.version&gt;
  &lt;/properties&gt;

  &lt;dependencies&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;junit&lt;/groupId&gt;
      &lt;artifactId&gt;junit&lt;/artifactId&gt;
      &lt;version&gt;4.11&lt;/version&gt;
      &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
    &lt;!-- spring --&gt;
    &lt;dependency&gt;
      &lt;groupId&gt;org.springframework&lt;/groupId&gt;
      &lt;artifactId&gt;spring-core&lt;/artifactId&gt;
      &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;
    &lt;/dependency&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;
  &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;
  &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;
  &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-web&lt;/artifactId&gt;
  &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;
  &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;
  &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.springframework&lt;/groupId&gt;
  &lt;artifactId&gt;spring-test&lt;/artifactId&gt;
  &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;
  &lt;scope&gt;test&lt;/scope&gt;
&lt;/dependency&gt;

&lt;!-- mybatis 包 --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;
  &lt;version&gt;3.2.8&lt;/version&gt;
&lt;/dependency&gt;

&lt;!--mybatis spring 插件 --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;
  &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;
  &lt;version&gt;1.2.2&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- mysql连接 注意版本 --&gt;

&lt;dependency&gt;
  &lt;groupId&gt;mysql&lt;/groupId&gt;
  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;
  &lt;version&gt;5.1.6&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- 数据源 --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
  &lt;artifactId&gt;druid&lt;/artifactId&gt;
  &lt;version&gt;1.0.12&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;org.aspectj&lt;/groupId&gt;
  &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;
  &lt;version&gt;1.8.4&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- log4j --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;log4j&lt;/groupId&gt;
  &lt;artifactId&gt;log4j&lt;/artifactId&gt;
  &lt;version&gt;1.2.17&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- servlet --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
  &lt;artifactId&gt;servlet-api&lt;/artifactId&gt;
  &lt;version&gt;3.0-alpha-1&lt;/version&gt;
  &lt;scope&gt;provided&lt;/scope&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;
  &lt;artifactId&gt;jstl&lt;/artifactId&gt;
  &lt;version&gt;1.2&lt;/version&gt;
&lt;/dependency&gt;

&lt;!-- json --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;org.codehaus.jackson&lt;/groupId&gt;
  &lt;artifactId&gt;jackson-mapper-asl&lt;/artifactId&gt;
  &lt;version&gt;1.9.13&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;com.alibaba&lt;/groupId&gt;
  &lt;artifactId&gt;fastjson&lt;/artifactId&gt;
  &lt;version&gt;1.2.3&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
  &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;
  &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
  &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;
  &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;
  &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;
  &lt;version&gt;$&#123;jackson.version&#125;&lt;/version&gt;
&lt;/dependency&gt;
&lt;!-- 文件上传 --&gt;
&lt;dependency&gt;
  &lt;groupId&gt;commons-io&lt;/groupId&gt;
  &lt;artifactId&gt;commons-io&lt;/artifactId&gt;
  &lt;version&gt;2.4&lt;/version&gt;
&lt;/dependency&gt;

&lt;dependency&gt;
  &lt;groupId&gt;commons-fileupload&lt;/groupId&gt;
  &lt;artifactId&gt;commons-fileupload&lt;/artifactId&gt;
  &lt;version&gt;1.2.2&lt;/version&gt;
&lt;/dependency&gt;
  &lt;/dependencies&gt;
</code></pre>
<h3 id="2-web-xml配置："><a href="#2-web-xml配置：" class="headerlink" title="2.web.xml配置："></a>2.web.xml配置：</h3><pre><code>  &lt;context-param&gt;
        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
        &lt;param-value&gt;classpath:applicationContext*.xml&lt;/param-value&gt;
    &lt;/context-param&gt;

    &lt;listener&gt;
        &lt;listener-class&gt;org.springframework.web.context.ContextLoaderListener&lt;/listener-class&gt;
    &lt;/listener&gt;

    &lt;servlet&gt;
        &lt;servlet-name&gt;springMvc&lt;/servlet-name&gt;
        &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;
            &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;
        &lt;/init-param&gt;
        &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;
    &lt;/servlet&gt;
    &lt;servlet-mapping&gt;
        &lt;servlet-name&gt;springMvc&lt;/servlet-name&gt;
        &lt;url-pattern&gt;*.do&lt;/url-pattern&gt;
    &lt;/servlet-mapping&gt;
    &lt;!-- 编码Filter 加载配置 Start --&gt;
    &lt;filter&gt;
        &lt;filter-name&gt;SetCharacterEncoding&lt;/filter-name&gt;
        &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;
        &lt;init-param&gt;
            &lt;param-name&gt;encoding&lt;/param-name&gt;
            &lt;param-value&gt;UTF-8&lt;/param-value&gt;
        &lt;/init-param&gt;
    &lt;/filter&gt;
    &lt;filter-mapping&gt;
        &lt;filter-name&gt;SetCharacterEncoding&lt;/filter-name&gt;
        &lt;url-pattern&gt;/*&lt;/url-pattern&gt;
    &lt;/filter-mapping&gt;
</code></pre>
<h3 id="3-applicationContext-dao-xml配置："><a href="#3-applicationContext-dao-xml配置：" class="headerlink" title="3.applicationContext-dao.xml配置："></a>3.applicationContext-dao.xml配置：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">   xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">   xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span><br><span class="line">   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span><br><span class="line">   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd&quot;&gt;</span><br><span class="line">   </span><br><span class="line">   &lt;!-- 数据库连接池 --&gt;</span><br><span class="line">   &lt;!-- 加载配置文件 --&gt;</span><br><span class="line">   &lt;context:property-placeholder location=&quot;classpath:dbconfig.properties&quot; /&gt;</span><br><span class="line">   &lt;!-- 数据库连接池 --&gt;</span><br><span class="line">   &lt;bean id=&quot;dataSource&quot; class=&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</span><br><span class="line">      &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</span><br><span class="line">      &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</span><br><span class="line">      &lt;property name=&quot;driverClassName&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">   &lt;!-- 让spring管理sqlsessionfactory 使用mybatis和spring整合包中的 --&gt;</span><br><span class="line">   &lt;bean id=&quot;sqlSessionFactory&quot; class=&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;&gt;</span><br><span class="line">      &lt;!-- 数据库连接池 --&gt;</span><br><span class="line">      &lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot; /&gt;</span><br><span class="line">      &lt;!-- 加载mybatis的全局配置文件 --&gt;</span><br><span class="line">      &lt;property name=&quot;mapperLocations&quot; value=&quot;classpath*:com/zht/mapper/*.xml&quot;&gt;&lt;/property&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">   &lt;!-- 自动扫描 将Mapper接口生成代理注入到Spring --&gt;</span><br><span class="line">   &lt;bean class=&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;&gt;</span><br><span class="line">      &lt;property name=&quot;basePackage&quot; value=&quot;com.zht.dao&quot; /&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br><span class="line"> </span><br></pre></td></tr></table></figure>

<p>4.applicationContext-service.xml配置：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">   xmlns:context=&quot;http://www.springframework.org/schema/context&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">   xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot; xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line">   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span><br><span class="line">   http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span><br><span class="line">   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span><br><span class="line">   http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd&quot;&gt;</span><br><span class="line">      </span><br><span class="line">      &lt;!-- spring自动去扫描base-pack下面或者子包下面的java文件--&gt;</span><br><span class="line">      &lt;!--管理Service实现类--&gt;</span><br><span class="line">      &lt;context:component-scan base-package=&quot;com.zht.service&quot;/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="5-springmvc-xml配置："><a href="#5-springmvc-xml配置：" class="headerlink" title="5.springmvc.xml配置："></a>5.springmvc.xml配置：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">   xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</span><br><span class="line">   xmlns:context=&quot;http://www.springframework.org/schema/context&quot;</span><br><span class="line">   xmlns:mvc=&quot;http://www.springframework.org/schema/mvc&quot;</span><br><span class="line">   xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span><br><span class="line">        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd</span><br><span class="line">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &lt;!-- Spring 来扫描指定包下的类，并注册被@Component，@Controller，@Service，@Repository等注解标记的组件 --&gt;</span><br><span class="line">   &lt;mvc:annotation-driven /&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 扫描controller --&gt;</span><br><span class="line">   &lt;context:component-scan base-package=&quot;com.zht.controller&quot; /&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 配置SpringMVC的视图解析器 suffer prefix --&gt;</span><br><span class="line">   &lt;bean class=&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line">   &lt;mvc:default-servlet-handler/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-dbconfig-properties配置："><a href="#6-dbconfig-properties配置：" class="headerlink" title="6.dbconfig.properties配置："></a>6.dbconfig.properties配置：</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver </span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/数据库名?characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=数据库密码</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot初始化操作的几种方式</title>
    <url>/2022/04/21/SpringBoot%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    <content><![CDATA[<h2 id="1-实现CommandLineRunner，并重写run方法"><a href="#1-实现CommandLineRunner，并重写run方法" class="headerlink" title="1.实现CommandLineRunner，并重写run方法"></a>1.实现<strong>CommandLineRunner</strong>，并重写<strong>run</strong>方法</h2><p> SpringBoot在项目启动后会遍历所有实现CommandLineRunner的实体类并执行run方法，多个实现类可以并存并且根据order注解排序顺序执行。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@Order(1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitData1</span> <span class="keyword">implements</span> <span class="title class_">CommandLineRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(String... args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-实现ApplicationRunner，并重写run方法"><a href="#2-实现ApplicationRunner，并重写run方法" class="headerlink" title="2.实现ApplicationRunner，并重写run方法"></a>2.实现<strong>ApplicationRunner</strong>，并重写<strong>run</strong>方法</h2><p> run方法参数是ApplicationArguments，解析封装过后的args参数， 通过该对象既可以拿到原始命令行参数，也可以拿到解析后的参数， 其中 @Order中的值指定了执行顺序，值小的先执行。默认值是Integer.MAX_VALUE</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//@Order(2)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitData2</span> <span class="keyword">implements</span> <span class="title class_">ApplicationRunner</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;初始化操作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>CommandLineRunner</strong>和<strong>ApplicationRunner</strong>在接收命令行参数时  例如–spring.profile.active&#x3D;test，但ApplicatonRunner接口的方法参数ApplicationArguments（是个对象）比CommandLineRunner接口的方法参数（是个可以接收多个string的参数）功能更强大。ApplicatonRunner接口的方法参数ApplicationArguments既可以获取参数的字符串，也可以直接获取key；CommandLineRunner接口的方法参数只能获取参数的字符串。</p>
<h2 id="3-使用-PostConstruct-注解"><a href="#3-使用-PostConstruct-注解" class="headerlink" title="3.使用 @PostConstruct 注解"></a>3.使用 <strong>@PostConstruct</strong> 注解</h2><p> 它会在所在类的构造函数执行之后执行，在init()方法执行之前执行。(<strong>@PreDestroy</strong>注解的方法会在这个类的destory()方法执行之后执行.） </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitData3</span> &#123;</span><br><span class="line">    InitData3() &#123;</span><br><span class="line">     System.out.println(<span class="string">&quot;在init方法执行前执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;容器启动后执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-实现InitializingBean，并重写afterPropertiesSet方法"><a href="#4-实现InitializingBean，并重写afterPropertiesSet方法" class="headerlink" title="4.实现InitializingBean，并重写afterPropertiesSet方法"></a>4.实现<strong>InitializingBean</strong>，并重写<strong>afterPropertiesSet</strong>方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitData4</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;InitializingBean 开始了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SimpleDateFormat</title>
    <url>/2021/09/20/SimpleDateFormat%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h3 id="SimpleDateFormat的使用"><a href="#SimpleDateFormat的使用" class="headerlink" title="SimpleDateFormat的使用"></a>SimpleDateFormat的使用</h3><p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Date date=<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">SimpleDateFormat sdf=<span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-dd-mm hh:mm:ss&quot;</span>, Locale.CHINA);</span><br><span class="line">System.out.println(sdf.format(date));</span><br></pre></td></tr></table></figure>

<p>运行结果如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2021-13-45 10-45-12</span><br></pre></td></tr></table></figure>

<p>注意：SimpleDateFormat的第二个参数确认当前是哪个地区的时间，CHINA是中国时间，相应的星期也会显示中文。如果想显示英文，就要改为Locale.English，被认为走的是美国时间。</p>
<p>说明：SimpleDateFormat支持的时间格式:</p>
<ul>
<li>G: 公元 时代，例如AD公元</li>
<li>yy: 年的后2位</li>
<li>yyyy: 完整年</li>
<li>MM: 月，显示为1-12</li>
<li>MMM: 月，显示为英文月份简写,如 Jan</li>
<li>MMMM: 月，显示为英文月份全称，如 Janualy</li>
<li>dd: 日，2位数表示，如02</li>
<li>d: 日，1-2位显示，如 2</li>
<li>EEE: 简写星期几，如Sun</li>
<li>EEEE: 全写星期几，如Sunday</li>
<li>aa: 上下午，AM&#x2F;PM</li>
<li>H: 时，24小时制，0-23</li>
<li>K：时，12小时制，0-11</li>
<li>m: 分，1-2位</li>
<li>mm: 分，2位</li>
<li>s: 秒，1-2位</li>
<li>ss: 秒，2位</li>
<li>S: 毫秒</li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot移除内置Tomcat</title>
    <url>/2022/04/20/SpringBoot%E7%A7%BB%E9%99%A4%E5%86%85%E7%BD%AETomcat/</url>
    <content><![CDATA[<p>1.在pom文件中移除tomcat:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--移除内部tomcat--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.引入<strong>javax.servlet.api</strong>依赖:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完整<strong>pom.xml</strong>文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBootStarterUse<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    指定打包方式 （jar/war）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zht<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-REALEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入javax.servlet-api依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--移除内部tomcat--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jar/war包名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 主启动类清单 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xx.SpringBootStarterApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.修改SpringBoot启动类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Starter</span>  <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//不使用内置Tomcat启动 需要继承 SpringBootServletInitializer类 重写configure方法 引入javax.servlet.api依赖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(Starter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Starter.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.完成上述操作后执行依次执行 <strong>mvn clean</strong> 、<strong>mvn package</strong> </p>
<p>maven有<strong>package</strong>、<strong>install</strong>、<strong>deploy</strong>三种打包方式</p>
<p><strong>package</strong>命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</p>
<p><strong>install</strong>命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库</p>
<p><strong>deploy</strong>命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</p>
<p>5.打包完成后 直接把<strong>war</strong>包放在tomcat <strong>webapps</strong>文件夹下运行。（打包后的文件在项目的target文件下）</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot整合Redis</title>
    <url>/2021/11/05/SpringBoot%E6%95%B4%E5%90%88Redis/</url>
    <content><![CDATA[<p><strong>1.导入依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p><strong>2.配置application.yml</strong></p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">redis:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">  <span class="attr">lettuce:</span></span><br><span class="line">    <span class="attr">pool:</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">500</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">500</span></span><br><span class="line">      <span class="attr">max-idle:</span> <span class="number">500</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">timeout:</span> <span class="number">500</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">database:</span> <span class="number">1</span> <span class="comment">#0-15</span></span><br></pre></td></tr></table></figure>

<p><strong>3.封装工具类（方便操作）</strong></p>
<p>​     创建RedisUtil工具包，分别创建RedisConfig和RedisUtil两个java类，配置如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zht</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: redis配置类中自定义RedisTemplate</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021-11-05 下午 03:02</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;String, Object&gt;();</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="type">StringRedisSerializer</span> <span class="variable">stringRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// key采用String的序列化方式</span></span><br><span class="line">        template.setKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的key也采用String的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class="line">        <span class="comment">// value序列化方式采用jackson</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">// hash的value序列化方式采用jackson</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> zht</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: redis工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span> 2021-11-05 下午 03:07</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">RedisUtil</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Resource默认是按照名称来装配注入的</span></span><br><span class="line"><span class="comment">     * Autowired默认是按照类型装配注入的，如果想按照名称来转配注入，则需要结合<span class="doctag">@Qualifier</span>一起使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// =============================common============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key 获取过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间(秒) 返回0代表为永久有效</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断key是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 可以传一个值 或多个</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">del</span><span class="params">(String... key)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (key != <span class="literal">null</span> &amp;&amp; key.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (key.length == <span class="number">1</span>) &#123;</span><br><span class="line">                redisTemplate.delete(key[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                redisTemplate.delete((Collection&lt;String&gt;) CollectionUtils.arrayToList(key));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ============================String=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存获取</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">return</span> <span class="variable">key</span> <span class="operator">=</span>= <span class="literal">null</span> ? <span class="literal">null</span> : redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForValue().set(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 普通缓存放入并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) time要大于0 如果time小于等于0 将设置无限期</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set(key, value);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递增</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递增因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> delta 要减少几(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (delta &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;递减因子必须大于0&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ================================Map=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hget</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hmget</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map 对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false 失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hmset</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hset</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForHash().put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hdel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递增 如果不存在,就会创建一个 并把新增后的值返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要增加几(大于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hincr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, by);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hash递减</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> by   要减少记(小于0)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">hdecr</span><span class="params">(String key, String item, <span class="type">double</span> by)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, item, -by);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ============================set=============================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据key获取Set中的所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据value从一个set中查询,是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">sHasKey</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将数据放入set缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSet</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将set数据放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time   时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 成功个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sSetAndTime</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取set缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 358</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">sGetSetSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除值为value的</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key    键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> values 值 可以是多个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">setRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">            <span class="keyword">return</span> count;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ===============================list=================================</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> start 开始</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> end   结束 0 到 -1代表所有值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lGet</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取list缓存的长度</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lGetListSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过索引 获取list中的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引 index&gt;=0时， 0 表头，1 第二个元素，</span></span><br><span class="line"><span class="comment">     *              依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lGetIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将list放入缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lSet</span><span class="params">(String key, List&lt;Object&gt; value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().rightPushAll(key, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>)</span><br><span class="line">                expire(key, time);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引修改list中的某条数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> index 索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">lUpdateIndex</span><span class="params">(String key, <span class="type">long</span> index, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            redisTemplate.opsForList().set(key, index, value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除N个值为value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 移除多少个</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 移除的个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Long</span> <span class="variable">remove</span> <span class="operator">=</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">            <span class="keyword">return</span> remove;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>3.简单测试</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisUtil redisUtil;</span><br><span class="line">    <span class="comment">//对象</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;zht&quot;</span>, <span class="number">13</span>);</span><br><span class="line">        redisUtil.set(<span class="string">&quot;name2&quot;</span>,user);</span><br><span class="line">        System.out.println( redisUtil.get(<span class="string">&quot;name2&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//String</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">set</span> <span class="operator">=</span> redisUtil.set(<span class="string">&quot;zht&quot;</span>, <span class="string">&quot;成婧&quot;</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        System.out.println(redisUtil.get(<span class="string">&quot;zht&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot自定义Starter</title>
    <url>/2022/04/21/SpringBoot%E8%87%AA%E5%AE%9A%E4%B9%89Starter/</url>
    <content><![CDATA[<p>1.创建一个Maven项目，在pom.xml文件中添如下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zht<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-REALEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring-boot-autoconfigure此jar包中包含大量核心注解，包含条件注解等。--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-autoconfigure<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--maven打包插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">skip</span>&gt;</span>true<span class="tag">&lt;/<span class="name">skip</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2.创建AutoService属性类，用来在yml等配置文件中读取属性，如果没有配置，即是用默认的属性，如name&#x3D;”zht”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自动配置属性，以my为前缀</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;my&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoProperties</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name=<span class="string">&quot;zht&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> String sex=<span class="string">&quot;男&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age=<span class="number">21</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.创建要配置的类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//可以在这里做业务方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getName()+<span class="string">&quot;在吃饭呢&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">       <span class="keyword">public</span>  <span class="keyword">void</span> <span class="title function_">drink</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.getName()+<span class="string">&quot;在喝水呢&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.创建自动配置类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(AutoService.class)</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(AutoProperties.class)</span></span><br><span class="line"><span class="meta">@ConditionalOnProperty(prefix = &quot;my&quot;, value = &quot;enabled&quot;, matchIfMissing = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoServiceAutoConfigraution</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    AutoProperties autoProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="comment">//当没有AutoService这个类时注入</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean(AutoService.class)</span></span><br><span class="line">    <span class="keyword">public</span> AutoService <span class="title function_">autoService</span><span class="params">()</span>&#123;</span><br><span class="line">        AutoService autoService=<span class="keyword">new</span> <span class="title class_">AutoService</span>();</span><br><span class="line">        autoService.setName(autoProperties.getName());</span><br><span class="line">        autoService.setSex(autoProperties.getSex());</span><br><span class="line">        autoService.setAge(autoProperties.getAge());</span><br><span class="line">        <span class="keyword">return</span>  autoService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>@Configuration：表明此类是一个配置类，将变为一个bean被spring进行管理。<br>@EnableConfigurationProperties：启用属性配置，将读取AutoProperties里面的属性。<br>@ConditionalOnClass：当类路径下面有AutoService此类时，自动配置。<br>@ConditionalOnProperty：判断指定的属性是否具备指定的值。<br>@ConditionalOnMissingBean：当容器中没有指定bean是，创建此bean</p>
<p>5.在resources目录下创建META-INF文件夹，再在下面创建spring.factories文件，里面写入如下值（如果有多个用，分割）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.EnableAutoConfiguration=\</span><br><span class="line">  com.zht.properties.AutoServiceAutoConfigraution</span><br></pre></td></tr></table></figure>

<p>6.上述完成后，执行mvn clean install ，这样在自己的maven仓库就可以找到了</p>
<p>7.新建一个SpringBoot项目，在pom文件中引入以下依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zht<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-REALEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>8.新建一个controller类,在controller类中使用这个starter</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StarterController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AutoService autoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/getInfo&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        autoService.eat();</span><br><span class="line">        autoService.drink();</span><br><span class="line">        <span class="keyword">return</span> autoService.getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>9.启动后访问看输出，然后还可以在yml文件中添加自己的配置属性</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"><span class="attr">my:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">cj</span></span><br></pre></td></tr></table></figure>

<p>这样返回和输出的值就变了。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot移除内置Tomcat</title>
    <url>/2022/04/20/SpringBoot%E7%A7%BB%E9%99%A4%E5%86%85%E7%BD%AETomcat%20(copy)%20(copy)/</url>
    <content><![CDATA[<p>1.在pom文件中移除tomcat:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--移除内部tomcat--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.引入<strong>javax.servlet.api</strong>依赖:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>完整<strong>pom.xml</strong>文件如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>SpringBootStarterUse<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    指定打包方式 （jar/war）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zht<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hello-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-REALEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入javax.servlet-api依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--移除内部tomcat--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jar/war包名称 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>$&#123;project.name&#125;<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 主启动类清单 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.xx.SpringBootStarterApplication<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>repackage<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>3.修改SpringBoot启动类:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Starter</span>  <span class="keyword">extends</span> <span class="title class_">SpringBootServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//不使用内置Tomcat启动 需要继承 SpringBootServletInitializer类 重写configure方法 引入javax.servlet.api依赖</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> SpringApplicationBuilder <span class="title function_">configure</span><span class="params">(SpringApplicationBuilder builder)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> builder.sources(Starter.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Starter.class,args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.完成上述操作后执行依次执行 <strong>mvn clean</strong> 、<strong>mvn package</strong> </p>
<p>maven有<strong>package</strong>、<strong>install</strong>、<strong>deploy</strong>三种打包方式</p>
<p><strong>package</strong>命令完成了项目编译、单元测试、打包功能，但没有把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</p>
<p><strong>install</strong>命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库，但没有布署到远程maven私服仓库</p>
<p><strong>deploy</strong>命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到本地maven仓库和远程maven私服仓库</p>
<p>5.打包完成后 直接把<strong>war</strong>包放在tomcat <strong>webapps</strong>文件夹下运行。（打包后的文件在项目的target文件下）</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>String和StringBuffer、StringBuilder的区别是什么？</title>
    <url>/2021/09/10/String%E5%92%8CStringBuffer%E3%80%81StringBuilder%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<h2 id="String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的-？"><a href="#String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的-？" class="headerlink" title="String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的 ？"></a><strong>String和StringBuffer、StringBuilder的区别是什么？String为什么是不可变的</strong> ？</h2><p><strong>可变性</strong> </p>
<p>String类中使用字符数组保存字符串，private final char value[]，所以string对象是不可变的。StringBuilder与 StringBuffer都继承自AbstractStringBuilder类，在AbstractStringBuilder中也是使用字符数组保存字符串，char[]  value，这两种对象都是可变的。 </p>
<p><strong>线程安全性</strong> </p>
<p>String中的对象是不可变的，也就可以理解为常量，线程安全。AbstractStringBuilder是StringBuilder与StringBuffer的公共父类，定义了一些字符串的基本操作，如expandCapacity、append、insert、indexOf等公共方法。StringBuffer对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。StringBuilder并没有对方法进行加同步锁，所以是非线程安全的。 </p>
<p><strong>性能</strong></p>
<p>每次对String 类型进行改变的时候，都会生成一个新的String对象，然后将指针指向新的String 对象。StringBuffer每次都会对StringBuffer对象本身进行操作，而不是生成新的对象并改变对象引用。</p>
<p>相同情况下使用StirngBuilder 相比使用StringBuffer 仅能获得10%~15% 左右的性能提升，但却要冒多线程不安全的风险。 </p>
<p><strong>对于三者使用的总结</strong> </p>
<p>如果要操作少量的数据用 &#x3D; String </p>
<p>单线程操作字符串缓冲区下操作大量数据 &#x3D; StringBuilder </p>
<p>多线程操作字符串缓冲区下操作大量数据 &#x3D; StringBuffer </p>
<p>​    </p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Java StringBuffer &amp; StringBuilder 类</title>
    <url>/2021/09/06/StringBuffer%20&amp;%20StringBuilder%20%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Java-StringBuffer-和-StringBuilder-类"><a href="#Java-StringBuffer-和-StringBuilder-类" class="headerlink" title="Java StringBuffer 和 StringBuilder 类"></a>Java StringBuffer 和 StringBuilder 类</h1><p>当对字符串进行修改的时候，需要使用 StringBuffer 和 StringBuilder 类。</p>
<p>和 String 类不同的是，StringBuffer 和 StringBuilder 类的对象能够被多次的修改，并且不产生新的未使用对象。</p>
<p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-string-20201208.png" alt="img"></p>
<h2 id="StringBuffer-amp-StringBuilder之间的区别"><a href="#StringBuffer-amp-StringBuilder之间的区别" class="headerlink" title="StringBuffer &amp; StringBuilder之间的区别"></a>StringBuffer &amp; StringBuilder之间的区别</h2><p>在使用 StringBuffer 类时，每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象，所以如果需要对字符串进行修改推荐使用 StringBuffer。</p>
<p>StringBuilder 类在 Java 5 中被提出，它和 StringBuffer 之间的最大不同在于 StringBuilder 的方法不是线程安全的（不能同步访问）。</p>
<p>由于 StringBuilder 相较于 StringBuffer 有速度优势，所以多数情况下建议使用 StringBuilder 类。</p>
<h2 id="StringBuffer-方法"><a href="#StringBuffer-方法" class="headerlink" title="StringBuffer 方法"></a>StringBuffer 方法</h2><p>以下是 StringBuffer 类支持的主要方法：</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left"></td>
<td align="left">public StringBuffer append(String s) 将指定的字符串追加到此字符序列。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">public StringBuffer reverse()  将此字符序列用其反转形式取代。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">public delete(int start, int end) 移除此序列的子字符串中的字符。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">public insert(int offset, int i) 将 <code>int</code> 参数的字符串表示形式插入此序列中。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">insert(int offset, String str) 将 <code>str</code> 参数的字符串插入此序列中。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">replace(int start, int end, String str) 使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符。</td>
</tr>
</tbody></table>
<p>以下列表列出了 StringBuffer 类的其他常用方法：</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">int capacity() 返回当前容量。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">char charAt(int index) 返回此序列中指定索引处的 <code>char</code> 值。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">void ensureCapacity(int minimumCapacity) 确保容量至少等于指定的最小值。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin) 将字符从此序列复制到目标字符数组 <code>dst</code>。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">int indexOf(String str) 返回第一次出现的指定子字符串在该字符串中的索引。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">int indexOf(String str, int fromIndex) 从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">int lastIndexOf(String str) 返回最右边出现的指定子字符串在此字符串中的索引。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">int lastIndexOf(String str, int fromIndex) 返回 String 对象中子字符串最后出现的位置。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">int length()  返回长度（字符数）。</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">void setCharAt(int index, char ch) 将给定索引处的字符设置为 <code>ch</code>。</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">void setLength(int newLength) 设置字符序列的长度。</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">CharSequence subSequence(int start, int end) 返回一个新的字符序列，该字符序列是此序列的子序列。</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">String substring(int start) 返回一个新的 <code>String</code>，它包含此字符序列当前所包含的字符子序列。</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">String substring(int start, int end) 返回一个新的 <code>String</code>，它包含此序列当前所包含的字符子序列。</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">String toString() 返回此序列中数据的字符串表示形式。</td>
</tr>
</tbody></table>
<p>以下列表列出了 StringBuilder类的其他常用方法：</p>
<table>
<thead>
<tr>
<th align="left">序号</th>
<th align="left">方法描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1</td>
<td align="left">replace(int start, int end, String str)使用指定的 <code>String</code>的字符替换此序列的子字符串中的字符。</td>
</tr>
<tr>
<td align="left">2</td>
<td align="left">reverse()导致此字符序列被序列的反向替换。</td>
</tr>
<tr>
<td align="left">3</td>
<td align="left">setCharAt(int index, char ch)指定索引处的字符设置为 <code>ch</code> 。</td>
</tr>
<tr>
<td align="left">4</td>
<td align="left">substring(int start)返回一个新的 <code>String</code> ，其中包含此字符序列中当前包含的字符的子序列。</td>
</tr>
<tr>
<td align="left">5</td>
<td align="left">substring(int start, int end)返回一个新的 <code>String</code> ，其中包含当前包含在此序列中的字符的子序列。</td>
</tr>
<tr>
<td align="left">6</td>
<td align="left">length() 返回长度（字符数）。</td>
</tr>
<tr>
<td align="left">7</td>
<td align="left">append(String str)将指定的字符串追加到此字符序列。</td>
</tr>
<tr>
<td align="left">8</td>
<td align="left">charAt(int index)返回指定索引处的此序列中的 <code>char</code>值。</td>
</tr>
<tr>
<td align="left">9</td>
<td align="left">delete(int start, int end)删除此序列的子字符串中的字符。</td>
</tr>
<tr>
<td align="left">10</td>
<td align="left">deleteCharAt(int index)按此顺序删除指定位置的 <code>char</code> 。</td>
</tr>
<tr>
<td align="left">11</td>
<td align="left">indexOf(String str)返回指定子字符串第一次出现的字符串中的索引。</td>
</tr>
<tr>
<td align="left">12</td>
<td align="left">capacity() 返回当前容量。</td>
</tr>
<tr>
<td align="left">13</td>
<td align="left">compareTo(StringBuilder another)<code>StringBuilder</code>字典顺序比较两个 <code>StringBuilder</code>实例。</td>
</tr>
<tr>
<td align="left">14</td>
<td align="left">insert(int offset, String str) 将字符串插入此字符序列。</td>
</tr>
<tr>
<td align="left">15</td>
<td align="left">trimToSize() 尝试减少用于字符序列的存储空间。</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA基础</tag>
      </tags>
  </entry>
  <entry>
    <title>String类</title>
    <url>/2021/09/05/String%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="一、java-String类"><a href="#一、java-String类" class="headerlink" title="一、java String类"></a>一、java String类</h1><p>​    字符串广泛应用 在 Java 编程中，在 Java 中字符串属于对象，Java 提供了 String 类来创建和操作字符串。</p>
<p>​    <strong>注意:</strong> String 类是不可改变的，所以你一旦创建了 String 对象，那它的值就无法改变了析如果需要对字符串做很多修改，那么应该选择使用 StringBuffer&amp;StringBuilder类</p>
<h3 id="String方法"><a href="#String方法" class="headerlink" title="String方法"></a>String方法</h3><table>
<thead>
<tr>
<th>序号</th>
<th>方法描述</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>char  charAt(int index) 返回指定索引处的char值</td>
</tr>
<tr>
<td>2</td>
<td>int compareTo (Object to)   把这个字符串和另一个对象比较</td>
</tr>
<tr>
<td>3</td>
<td>int compareTo (String  anotherString) 按字典顺序比较两个字符串</td>
</tr>
<tr>
<td>4</td>
<td>int compareTolgnoreCase(String str) 按字典顺序比较两个字符串,不考虑大小写</td>
</tr>
<tr>
<td>5</td>
<td>String concat(String str)  将指定字符串连接到此字符串的结尾</td>
</tr>
<tr>
<td>6</td>
<td>boolean contentEquals(StringBuffer sb)  当且仅当字符串与指定的StringBuffer有相同顺序的字符时候返回真</td>
</tr>
<tr>
<td>7</td>
<td>static String copyValueOf(char[] data) 返回指定数组中表示该字符序列的 String。</td>
</tr>
<tr>
<td>8</td>
<td>static String copyValueOf(char[] data, int offset, int count) 返回指定数组中表示该字符序列的 String</td>
</tr>
<tr>
<td>9</td>
<td>boolean endsWith(String suffix) 测试此字符串是否以指定的后缀结束</td>
</tr>
<tr>
<td>10</td>
<td>boolean equals(Object anObject) 将此字符串与指定的对象比较</td>
</tr>
<tr>
<td>11</td>
<td>boolean equalsIgnoreCase(String anotherString) 将此 String 与另一个 String 比较，不考虑大小写</td>
</tr>
<tr>
<td>12</td>
<td>byte[] getBytes()   使用平台的默认字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中</td>
</tr>
<tr>
<td>13</td>
<td>byte[] getBytes(String charsetName) 使用指定的字符集将此 String 编码为 byte 序列，并将结果存储到一个新的 byte 数组中</td>
</tr>
<tr>
<td>14</td>
<td>int hashCode()  返回此字符串的哈希码</td>
</tr>
<tr>
<td>15</td>
<td>int indexOf(int ch) 返回指定字符在此字符串中第一次出现处的索引</td>
</tr>
<tr>
<td>16</td>
<td>int indexOf(int ch, int fromIndex) 返回在此字符串中第一次出现指定字符处的索引，从指定的索引开始搜索</td>
</tr>
<tr>
<td>17</td>
<td>int indexOf(String str)  返回指定子字符串在此字符串中第一次出现处的索引</td>
</tr>
<tr>
<td>18</td>
<td>int indexOf(String str, int fromIndex) 返回指定子字符串在此字符串中第一次出现处的索引，从指定的索引开始</td>
</tr>
<tr>
<td>19</td>
<td>String intern()   返回字符串对象的规范化表示形式</td>
</tr>
<tr>
<td>20</td>
<td>int lastIndexOf(int ch)  返回指定字符在此字符串中最后一次出现处的索引</td>
</tr>
<tr>
<td>21</td>
<td>int lastIndexOf(int ch, int fromIndex) 返回指定字符在此字符串中最后一次出现处的索引，从指定的索引处开始进行反向搜索</td>
</tr>
<tr>
<td>22</td>
<td>int length() 返回此字符串的长度</td>
</tr>
<tr>
<td>23</td>
<td>boolean matches(String regex) 告知此字符串是否匹配给定的正则表达式</td>
</tr>
<tr>
<td>24</td>
<td>String replace(char oldChar, char newChar) 返回一个新的字符串，它是通过用 newChar 替换此字符串中出现的所有 oldChar 得到的</td>
</tr>
<tr>
<td>25</td>
<td>String replaceAll(String regex, String replacement) 使用给定的 replacement 替换此字符串所有匹配给定的正则表达式的子字符串</td>
</tr>
<tr>
<td>26</td>
<td>String replaceFirst(String regex, String replacement) 使用给定的 replacement 替换此字符串匹配给定的正则表达式的第一个子字符串</td>
</tr>
<tr>
<td>27</td>
<td>String[] split(String regex)  根据给定正则表达式的匹配拆分此字符串</td>
</tr>
<tr>
<td>28</td>
<td>String[] split(String regex, int limit) 根据匹配给定的正则表达式来拆分此字符串</td>
</tr>
<tr>
<td>29</td>
<td>boolean startsWith(String prefix) 测试此字符串是否以指定的前缀开始</td>
</tr>
<tr>
<td>30</td>
<td>boolean startsWith(String prefix, int toffset) 测试此字符串从指定索引开始的子字符串是否以指定前缀开始</td>
</tr>
<tr>
<td>31</td>
<td>String substring(int beginIndex) 返回一个新的字符串，它是此字符串的一个子字符串</td>
</tr>
<tr>
<td>32</td>
<td>String substring(int beginIndex, int endIndex) 返回一个新字符串，它是此字符串的一个子字符串</td>
</tr>
<tr>
<td>33</td>
<td>char[] toCharArray()  将此字符串转换为一个新的字符数组</td>
</tr>
<tr>
<td>34</td>
<td>String toLowerCase()  使用默认语言环境的规则将此 String 中的所有字符都转换为小写</td>
</tr>
<tr>
<td>35</td>
<td>String toLowerCase(Locale locale)  使用给定 Locale 的规则将此 String 中的所有字符都转换为小写</td>
</tr>
<tr>
<td>36</td>
<td>String toString()   返回此对象本身（它已经是一个字符串！）。</td>
</tr>
<tr>
<td>37</td>
<td>String toUpperCase() 使用默认语言环境的规则将此 String 中的所有字符都转换为大写</td>
</tr>
<tr>
<td>38</td>
<td>String trim() 返回字符串的副本，忽略前导空白和尾部空白</td>
</tr>
<tr>
<td>39</td>
<td>static String valueOf(primitive data type x)   返回给定data type类型x参数的字符串表示形式</td>
</tr>
<tr>
<td>40</td>
<td>contains(CharSequence chars)  判断是否包含指定的字符系列</td>
</tr>
<tr>
<td>41</td>
<td>isEmpty()  判断字符串是否为空</td>
</tr>
</tbody></table>
<p>​    </p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA基础</tag>
      </tags>
  </entry>
  <entry>
    <title>java拦截器</title>
    <url>/2022/02/21/java%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
    <content><![CDATA[<h2 id="java拦截器"><a href="#java拦截器" class="headerlink" title="java拦截器"></a>java拦截器</h2><p><strong>概念：</strong>java里的拦截器是动态拦截Action调用的对象，它提供了一种机制可以使开发者在一个Action执行的前后执行一段代码，也可以在一个Action执行前阻止其执行，同时也提供了一种可以提取Action中可重用部分代码的方式。</p>
<p><strong>作用域：</strong>动态拦截Action调用的对象（也就是我们的controller层）</p>
<ul>
<li><p>写一个实现了<strong>WebMvcConfigurer</strong>接口的配置类</p>
</li>
<li><p>重写其中的addCorsMappings()方法【配置跨域信息】和addInterceptors()方法【配置拦截器信息，如拦截路径和开放路径等】</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfiguration</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//注册Interceptor拦截器(Interceptor这个类是我们自己写的拦截器类)</span></span><br><span class="line">        <span class="type">InterceptorRegistration</span> <span class="variable">registration</span> <span class="operator">=</span> registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">Interceptor</span>());</span><br><span class="line">        <span class="comment">//addPathPatterns()方法添加需要拦截的路径</span></span><br><span class="line">        registration.addPathPatterns(<span class="string">&quot;/**&quot;</span>);                      <span class="comment">//所有路径都被拦截</span></span><br><span class="line">        <span class="comment">//excludePathPatterns()方法添加不拦截的路径</span></span><br><span class="line">        registration.excludePathPatterns(                         <span class="comment">//添加不拦截路径</span></span><br><span class="line">            <span class="string">&quot;/demo/loginPage&quot;</span>,               <span class="comment">//登录页面的地址【不拦截】</span></span><br><span class="line">                <span class="string">&quot;/**/*.html&quot;</span>,                 <span class="comment">//html静态资源</span></span><br><span class="line">                <span class="string">&quot;/**/*.js&quot;</span>,                  <span class="comment">//js静态资源</span></span><br><span class="line">                <span class="string">&quot;/**/*.css&quot;</span>) ;             <span class="comment">//css静态资源</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> &#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>)<span class="comment">//指哪些接口URL需要增加跨域设置</span></span><br><span class="line">                .allowedOrigins(<span class="string">&quot;*&quot;</span>)<span class="comment">//指的是前端哪些域名被允许跨域</span></span><br><span class="line">                .allowCredentials(<span class="literal">true</span>)<span class="comment">//需要带cookie等凭证时，设置为true，就会把cookie的相关信息带上</span></span><br><span class="line">                .allowedMethods(<span class="string">&quot;GET&quot;</span>, <span class="string">&quot;HEAD&quot;</span>, <span class="string">&quot;POST&quot;</span>, <span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>, <span class="string">&quot;OPTIONS&quot;</span>)<span class="comment">//指的是允许哪些方法</span></span><br><span class="line">                .maxAge(<span class="number">3600</span>);<span class="comment">//cookie的失效时间，单位为秒（s），若设置为-1，则关闭浏览器就失效</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li><p>写一个实现<strong>HandlerInterceptor</strong>接口的自定义拦截器 </p>
<p>preHandle：在业务处理器处理请求之前被调用。预处理，可以进行编码、安全控制、权限校验等处理；<br>postHandle：在业务处理器处理请求执行完成后，生成视图之前执行。后处理（调用了Service并返回							ModelAndView，但未进行页面渲染），有机会修改ModelAndView；<br>afterCompletion：在DispatcherServlet完全处理完请求后被调用，可用于清理资源等。返回处理（已										经渲染了页面）；</p>
</li>
<li><p>4、重写其中的preHandle()方法，方法内容为拦截到请求后的处理</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Interceptor</span>  <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//在这里可以通过request获取前台带来的用户信息或者token并且进行验证</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;判断条件&quot;</span>)&#123;</span><br><span class="line">            <span class="comment">//判断成功 return true</span></span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            response.sendRedirect(request.getContextPath()+<span class="string">&quot;loginPage&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.postHandle(request, response, handler, modelAndView);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HandlerInterceptor.<span class="built_in">super</span>.afterCompletion(request, response, handler, ex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>java线程池</title>
    <url>/2021/10/23/java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p><strong>线程池优势</strong></p>
<p>线程池做的工作主要是：控制运行的线程数量，处理过程中将任务放入队列，然后在线程创建后启动这</p>
<p>些任务，如果线程数量超过了最大数量，超出数量的线程排队等候，等其他线程执行完毕，再从队列中</p>
<p>取出任务来执行。</p>
<p>它的主要<strong>特点</strong>为：线程复用，控制最大并发数，管理线程。</p>
<p><strong>第一</strong>：降低资源消耗，通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p>
<p><strong>第二</strong>：提高响应速度。当任务到达时，任务可以不需要等待线程创建就能立即执行。</p>
<p><strong>第三</strong>：提高线程的可管理性，线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系</p>
<p>​             统的稳定性，使用线程池可以进行统一分配，调优和监控。</p>
<h2 id="线程池的三大方法"><a href="#线程池的三大方法" class="headerlink" title="线程池的三大方法"></a>线程池的三大方法</h2><p><strong>Executors.newFixedThreadPool(int)</strong>      </p>
<p>执行长期任务性能好，创建一个线程池，一池有N个固定的线程，有固定线程数的线程。</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 办理业务&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">5</span> 办理业务</span><br></pre></td></tr></table></figure>

<p><strong>Executors.newSingleThreadExecutor()</strong>  </p>
<p>只有一个线程</p>
<p>举例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">    ExecutorService executorService = Executors.newSingleThreadExecutor();</span><br><span class="line">    for (int i = 0; i &lt;= 10; i++) &#123;</span><br><span class="line">        executorService.execute(new Runnable() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+&quot; 办理业务&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br></pre></td></tr></table></figure>

<p><strong>Executors.newCachedThreadPool()</strong>  </p>
<p>执行很多短期异步任务，线程池根据需要创建新线程，但在先构建的线程可用时将重用他们。可扩容，遇强则强</p>
<p>举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ExecutorService</span> <span class="variable">executorService</span> <span class="operator">=</span> Executors.newCachedThreadPool();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; 办理业务&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">5</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">6</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">9</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">10</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">8</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">11</span> 办理业务</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">7</span> 办理业务</span><br></pre></td></tr></table></figure>

<h2 id="ThreadPoolExecutor"><a href="#ThreadPoolExecutor" class="headerlink" title="ThreadPoolExecutor"></a>ThreadPoolExecutor</h2><p><strong>工作原理</strong>：</p>
<p><a href="https://imgtu.com/i/7FvepV"><img src="https://s4.ax1x.com/2022/01/09/7FvepV.png" alt="7FvepV.png"></a></p>
<p>在这三种方法的源码中，都调用了以下方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ThreadPoolExecutor</span><span class="params">(<span class="type">int</span> corePoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">int</span> maximumPoolSize,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> keepAliveTime,</span></span><br><span class="line"><span class="params">                          TimeUnit unit,</span></span><br><span class="line"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class="line"><span class="params">                          ThreadFactory threadFactory,</span></span><br><span class="line"><span class="params">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (corePoolSize &lt; <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt;= <span class="number">0</span> ||</span><br><span class="line">        maximumPoolSize &lt; corePoolSize ||</span><br><span class="line">        keepAliveTime &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (workQueue == <span class="literal">null</span> || threadFactory == <span class="literal">null</span> || handler == <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">    <span class="built_in">this</span>.acc = System.getSecurityManager() == <span class="literal">null</span> ?</span><br><span class="line">            <span class="literal">null</span> :</span><br><span class="line">            AccessController.getContext();</span><br><span class="line">    <span class="built_in">this</span>.corePoolSize = corePoolSize;</span><br><span class="line">    <span class="built_in">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class="line">    <span class="built_in">this</span>.workQueue = workQueue;</span><br><span class="line">    <span class="built_in">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class="line">    <span class="built_in">this</span>.threadFactory = threadFactory;</span><br><span class="line">    <span class="built_in">this</span>.handler = handler;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>7大参数理解：</strong></p>
<p><strong>corePollSize ：</strong>核心线程数。在创建了线程池后，线程中没有任何线程，等到有任务到来时才创建线程去执行任务。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到corePoolSize后，就会把到达的任务放到缓存队列当中。</p>
<p><strong>maximumPoolSize ：</strong>最大线程数。表明线程中最多能够创建的线程数量，此值必须大于等于1。 </p>
<p><strong>keepAliveTime ：</strong>空闲的线程保留的时间。</p>
<p><strong>TimeUnit</strong> ：空闲线程的保留时间单位。</p>
<ol>
<li>TimeUnit.DAYS; &#x2F;&#x2F;天 </li>
<li>TimeUnit.HOURS; &#x2F;&#x2F;小时 </li>
<li>TimeUnit.MINUTES; &#x2F;&#x2F;分钟 </li>
<li>TimeUnit.SECONDS; &#x2F;&#x2F;秒 </li>
<li>TimeUnit.MILLISECONDS; &#x2F;&#x2F;毫秒 </li>
<li>TimeUnit.MICROSECONDS; &#x2F;&#x2F;微妙 </li>
<li>TimeUnit.NANOSECONDS; &#x2F;&#x2F;纳秒</li>
</ol>
<p><strong>BlockingQueue&lt; Runnable&gt;</strong> ：阻塞队列，存储等待执行的任务。参数有ArrayBlockingQueue、LinkedBlockingQueue、SynchronousQueue可选。</p>
<p><strong>ThreadFactory</strong> ：线程工厂，用来创建线程，一般默认即可</p>
<p><strong>RejectedExecutionHandler</strong> ：队列已满，而且任务量大于最大线程的异常处理策略。有以下取值</p>
<ol>
<li>ThreadPoolExecutor.AbortPolicy:丢弃任务并抛出RejectedExecutionException异常。 </li>
<li>ThreadPoolExecutor.DiscardPolicy：也是丢弃任务，但是不抛出异常。 </li>
<li>ThreadPoolExecutor.DiscardOldestPolicy：丢弃队列最前面的任务，然后重新尝试执行任务 （重复此过程） </li>
<li>ThreadPoolExecutor.CallerRunsPolicy：由调用线程处理该任务</li>
</ol>
<p><strong>四种拒绝策略：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RejectedExecutionHandler rejected = null;</span><br><span class="line">rejected = new ThreadPoolExecutor.AbortPolicy();//默认，队列满了丢任务，抛出异常</span><br><span class="line">rejected = new ThreadPoolExecutor.DiscardPolicy();//队列满了丢任务，不抛出异常【如 果允许任务丢失这是最好的】</span><br><span class="line">rejected = new ThreadPoolExecutor.DiscardOldestPolicy();//将最早进入队列的任务 删，之后再尝试加入队列</span><br><span class="line">rejected = new ThreadPoolExecutor.CallerRunsPolicy();//如果添加到线程池失败，那么 主线程会自己去执行该任务，回退</span><br></pre></td></tr></table></figure>

<p><strong>测试代码</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//获取CPU的内核数</span></span><br><span class="line">    System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line">    <span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span></span><br><span class="line">            <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(</span><br><span class="line">            <span class="number">2</span>,</span><br><span class="line">            <span class="number">5</span>,<span class="comment">//最大线程数量</span></span><br><span class="line">            <span class="number">2L</span>,</span><br><span class="line">            TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">LinkedBlockingDeque</span>&lt;&gt;(<span class="number">3</span>),<span class="comment">//队列中等待的线程</span></span><br><span class="line">            Executors.defaultThreadFactory(),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>.AbortPolicy()<span class="comment">//大于最大线程数了拒绝，抛出异常</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        threadPoolExecutor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;在上厕所&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">8</span></span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>在上厕所</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>在上厕所</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>在上厕所</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>在上厕所</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">1</span>在上厕所</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">4</span>在上厕所</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">2</span>在上厕所</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">3</span>在上厕所</span><br><span class="line">pool-<span class="number">1</span>-thread-<span class="number">5</span>在上厕所</span><br><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.util.concurrent.RejectedExecutionException: Task com.zht.Thread_create$<span class="number">1</span>@330bedb4 rejected from java.util.concurrent.ThreadPoolExecutor@2503dbd3[Running, <span class="type">pool</span> <span class="variable">size</span> <span class="operator">=</span> <span class="number">5</span>, <span class="type">active</span> <span class="variable">threads</span> <span class="operator">=</span> <span class="number">0</span>, <span class="type">queued</span> <span class="variable">tasks</span> <span class="operator">=</span> <span class="number">0</span>, <span class="type">completed</span> <span class="variable">tasks</span> <span class="operator">=</span> <span class="number">9</span>]</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:<span class="number">2063</span>)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:<span class="number">830</span>)</span><br><span class="line">	at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:<span class="number">1379</span>)</span><br><span class="line">	at com.zht.Thread_create.main(Thread_create.java:<span class="number">27</span>)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>多线程</category>
      </categories>
  </entry>
  <entry>
    <title>synchronized与lock</title>
    <url>/2021/10/20/synchronized%E4%B8%8Elock/</url>
    <content><![CDATA[<p>  <strong>区别：</strong></p>
<ol>
<li>synchronized是java内置关键字，在jvm层面，Lock是个java类；</li>
<li>synchronized无法判断是否获取锁的状态，Lock可以判断是否获取到锁；</li>
<li>synchronized会自动释放锁(a 线程执行完同步代码会释放锁 ；b 线程执行过程中发生异常会释放锁)，Lock需在fifinally中手工释放锁（unlock()方法释放锁），否则容易造成线程死锁；</li>
<li>用synchronized关键字的两个线程1和线程2，如果当前线程1获得锁，线程2线程等待。如果线程1阻塞，线程2则会一直等待下去，而Lock锁就不一定会等待下去，如果尝试获取不到锁，线程可以不用一直等待就结束了；</li>
<li>synchronized的锁可重入、不可中断、非公平，而Lock锁可重入、可判断、可公平（两者皆可）</li>
<li>Lock锁适合大量同步的代码的同步问题，synchronized锁适合代码少量的同步问题。</li>
</ol>
<p><strong>写法举例：</strong></p>
<p>synchronized：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出第 &quot;</span> + (number--) + <span class="string">&quot;票,还剩下:&quot;</span> + number);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Lock：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ticket</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">number</span> <span class="operator">=</span> <span class="number">40</span>;</span><br><span class="line">   <span class="type">Lock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sale</span><span class="params">()</span> &#123;</span><br><span class="line">       lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (number &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;卖出第 &quot;</span> + (number--) + <span class="string">&quot;票,还剩下:&quot;</span> + number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">lock()：获取锁，如果锁被暂用则一直等待；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">unlock():释放锁；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">tryLock(): 注意返回类型是boolean，如果获取锁的时候锁被占用就返回false，否则返回true；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">tryLock(long time, TimeUnit unit)：比起tryLock()就是给了一个时间期限，保证等待参数时间；</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">lockInterruptibly()：用该锁的式，如果线程在获取锁的阶段进入了等待，那么此线程则可以被中断。*/</span></span><br></pre></td></tr></table></figure>

<p>测试代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Ticket</span> <span class="variable">ticket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Ticket</span>();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;A&quot;</span></span><br><span class="line">        ).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;B&quot;</span></span><br><span class="line">        ).start();</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= <span class="number">40</span>; i++) &#123;</span><br><span class="line">                ticket.sale();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;C&quot;</span></span><br><span class="line">        ).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多个线程去操作同一个资源，可能会出现问题，所以就用锁来控制。</p>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
  </entry>
  <entry>
    <title>前端通过后端response获取图片内容</title>
    <url>/2022/03/06/%E5%89%8D%E7%AB%AF%E9%80%9A%E8%BF%87%E5%90%8E%E7%AB%AFresponse%E8%8E%B7%E5%8F%96%E5%9B%BE%E7%89%87%E5%86%85%E5%AE%B9/</url>
    <content><![CDATA[<h2 id="前端通过JAVA后端response响应获取图片内容"><a href="#前端通过JAVA后端response响应获取图片内容" class="headerlink" title="前端通过JAVA后端response响应获取图片内容"></a>前端通过JAVA后端response响应获取图片内容</h2><p>前端内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:9091/tx?filename=tx.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>后端内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value = &quot;tx&quot;,method = &#123;RequestMethod.GET&#125;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getTx</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       String filename=request.getParameter(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">       String filepath=<span class="string">&quot;D:/img/&quot;</span>+filename;</span><br><span class="line">       <span class="comment">//创建文件对象</span></span><br><span class="line">       File file=<span class="keyword">new</span> <span class="title class_">File</span>(filepath);</span><br><span class="line">       <span class="keyword">if</span> (!file.exists())&#123;</span><br><span class="line">           <span class="comment">//后端抛出异常</span></span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;文件不存在&quot;</span>);</span><br><span class="line">       &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           String name=file.getName();</span><br><span class="line">           String contentType=<span class="string">&quot;img/jpeg&quot;</span>;</span><br><span class="line">           response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span> + <span class="keyword">new</span> <span class="title class_">String</span>(name.getBytes(<span class="string">&quot;UTF-8&quot;</span>), <span class="string">&quot;ISO_8859_1&quot;</span>));</span><br><span class="line">           <span class="keyword">if</span> (!name.endsWith(<span class="string">&quot;.jpg&quot;</span>)&amp;&amp;!name.endsWith(<span class="string">&quot;.jpeg&quot;</span>))&#123;</span><br><span class="line">               <span class="keyword">if</span> (name.endsWith(<span class="string">&quot;png&quot;</span>))&#123;</span><br><span class="line">                   contentType=<span class="string">&quot;img/png&quot;</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           ServletOutputStream out=response.getOutputStream();</span><br><span class="line">           response.setContentType(contentType);</span><br><span class="line">           response.setContentLength((<span class="type">int</span>) file.length());</span><br><span class="line">           <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">           <span class="keyword">if</span> (file.exists()) &#123;</span><br><span class="line">               <span class="type">FileInputStream</span> <span class="variable">fs</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">               <span class="keyword">while</span>(fs.read(buff) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                   out.write(buff);</span><br><span class="line">               &#125;</span><br><span class="line">               fs.close();</span><br><span class="line">           &#125;</span><br><span class="line">           out.flush();</span><br><span class="line">           out.close();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span>  <span class="literal">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>关于javaweb页面js,css等失效问题</title>
    <url>/2021/09/01/%E5%85%B3%E4%BA%8Ejavaweb%E9%A1%B5%E9%9D%A2js,css%E7%AD%89%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>1.当我们运行web项目时，html页面改jsp页面之前在首行提前添加如下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">    pageEncoding=&quot;UTF-8&quot;%&gt;</span><br></pre></td></tr></table></figure>

<p>2.但是加入代码修改后，可能会出现页面样式失效或者js失效等问题，如图所示：</p>
<p><a href="https://imgtu.com/i/hx0DC8"><img src="https://z3.ax1x.com/2021/09/11/hx0DC8.png" alt="hx0DC8.png"></a></p>
<p>3.然后我们按f12就可以看到一些css，js文件404找不到的问题，如图所示：</p>
<p><a href="https://imgtu.com/i/hxBpxe"><img src="https://z3.ax1x.com/2021/09/11/hxBpxe.png" alt="hxBpxe.png"></a></p>
<p>4.在这时，我们就可以在页面的前面加上如图所示的代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">   String path = request.getRequestURI();</span><br><span class="line">   String basePath = request.getScheme() + &quot;://&quot;</span><br><span class="line">         + request.getServerName() + &quot;:&quot; + request.getServerPort()</span><br><span class="line">         + path;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;base href=&quot;&lt;%=basePath%&gt;&quot;/&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://imgtu.com/i/hxBZPf"><img src="https://z3.ax1x.com/2021/09/11/hxBZPf.png" alt="hxBZPf.png"></a></p>
<p>5.完美解决：</p>
<p><a href="https://imgtu.com/i/hxBdsJ"><img src="https://z3.ax1x.com/2021/09/11/hxBdsJ.png" alt="hxBdsJ.png"></a></p>
<p>注：这不一定是唯一的方式，但亲测可行！</p>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
  </entry>
  <entry>
    <title>org.apache.ibatis.binding.BindingException报错解决</title>
    <url>/2021/09/09/org.apache.ibatis.binding.BindingException%20Invalid%20bound%20statement%20(not%20found)/</url>
    <content><![CDATA[<p>错误信息：	<strong>org.apache.ibatis.binding.BindingException: Invalid bound statement (not found): com.zht.dao.BookMapper.selAll</strong></p>
<p>关于这个问题，我的是 Maven 项目，在访问程序的接口时，抛出异常信息，无效的绑定语句。在检查调用的 Mapper 接口时，发现在目标文件中没有找到 Mapper 映射的配置文件，这是因为idea不会编译src的java目录的xml文件，所以在程序启动时，就找不到对应的映射文件，导致的这个错误。</p>
<p>解决办法如下：</p>
<p>在pom.xml中的build标签中加入以下代码：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;resources&gt;</span><br><span class="line">  &lt;resource&gt;</span><br><span class="line">    &lt;directory&gt;src/main/java&lt;/directory&gt;</span><br><span class="line">    &lt;includes&gt;</span><br><span class="line">      &lt;include&gt;**/*.xml&lt;/include&gt;</span><br><span class="line">    &lt;/includes&gt;</span><br><span class="line">  &lt;/resource&gt;</span><br><span class="line">&lt;/resources&gt;</span><br></pre></td></tr></table></figure>

<p>在这之前，一定要查看mapper.xml中的namespace是否写对或者对应的方法名与id是否一致！！！</p>
<p>还有一种方式就是直接把java文件夹移到src目录下。。。。。</p>
]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
  </entry>
  <entry>
    <title>单例模式</title>
    <url>/2021/10/20/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p> 单例模式（Singleton），也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需要拥有一个的全局对象，这样有利于我们协调系统整体的行为。比如在某个服务器程序中，该服务器的配置信息存放在一个文件中，这些配置数据由一个单例对象统一读取，然后服务进程中的其他对象再通过这个单例对象获取这些配置信息。这种方式简化了在复杂环境下的配置管理。 </p>
<p><strong>实现单例模式的思路是：</strong><br>  一个类能返回对象一个引用(永远是同一个)和一个获得该实例的方法（必须是静态方法，通常使用getInstance这个名 称）；当我们调用这个方法时，如果类持有的引用不为空就返回这个引用，如果类保持的引用为空就创建该类的实例并将实例的引用赋予该类保持的引用；同时我们 还将该类的构造函数定义为私有方法，这样其他处的代码就无法通过调用该类的构造函数来实例化该类的对象，只有通过该类提供的静态方法来得到该类的唯一实例。 </p>
<h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><ul>
<li>单例模式在多线程的 应用场合下必须小心使用。如果当唯一实例尚未创建时，有两个线程同时调用创建方法，那么它们同时没有检测到唯一实例的存在，从而同时各自创建了一个实例， 这样就有两个实例被构造出来，从而违反了单例模式中实例唯一的原则。 解决这个问题的办法是为指示类是否已经实例化的变量提供一个互斥锁(虽然这样会降低效率)。</li>
</ul>
<h6 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h6><ul>
<li>在单例模式中，活动的单例只有一个实例，对单例类的所有实例化得到的都是相同的一个实例。这样就 防止其它对象对自己的实例化，确保所有的对象都访问一个实例 </li>
<li>单例模式具有一定的伸缩性，类自己来控制实例化进程，类就在改变实例化进程上有相应的伸缩性。 </li>
<li>提供了对唯一实例的受控访问。 </li>
<li>由于在系统内存中只存在一个对象，因此可以 节约系统资源，当 需要频繁创建和销毁的对象时单例模式无疑可以提高系统的性能。 </li>
<li>允许可变数目的实例。 </li>
<li>避免对共享资源的多重占用。</li>
</ul>
<h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><ul>
<li>1.不适用于变化的对象，如果同一类型的对象总是要在不同的用例场景发生变化，单例就会引起数据的错误，不能保存彼此的状态。 </li>
<li>2.由于单利模式中没有抽象层，因此单例类的扩展有很大的困难。 </li>
<li>3.单例类的职责过重，在一定程度上违背了“单一职责原则”。 </li>
<li>4.滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为的单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出；如果实例化的对象长时间不被利用，系统会认为是垃圾而被回收，这将导致对象状态的丢失。</li>
</ul>
<h6 id="适用场景："><a href="#适用场景：" class="headerlink" title="适用场景："></a>适用场景：</h6><ul>
<li>单例模式只允许创建一个对象，因此节省内存，加快对象访问速度，因此对象需要被公用的场合适合使用，如多个模块使用同一个数据源连接对象等等。如： </li>
<li>需要频繁实例化然后销毁的对象。 </li>
<li>创建对象时耗时过多或者耗资源过多，但又经常用到的对象。 </li>
<li>有状态的工具类对象。 </li>
<li>频繁访问数据库或文件的对象。</li>
</ul>
<h6 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h6><ol>
<li><p>饿汉式（单例实例在类装载时就构建，急切初始化。（预先加载法））</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hungry</span> &#123;</span><br><span class="line">    <span class="comment">//防止被外部实例化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Hungry</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span>  <span class="keyword">final</span>  Hungry hungry=<span class="keyword">new</span> <span class="title class_">Hungry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> Hungry <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  hungry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>懒汉式（单例实例在第一次被使用时构建，延迟初始化，防止饿汉式实例化后浪费资源）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lazy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Lazy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Lazy lazy;</span><br><span class="line">    <span class="keyword">public</span> Lazy <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (lazy == <span class="literal">null</span>) &#123;</span><br><span class="line">            lazy = <span class="keyword">new</span> <span class="title class_">Lazy</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> lazy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>DCL懒汉式（多线程情况下可以保证安全）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DCLLazy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">DCLLazy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DCLLazy dcllazy;</span><br><span class="line">    <span class="keyword">public</span> DCLLazy <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (dcllazy == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DCLLazy.class)&#123;</span><br><span class="line">                dcllazy = <span class="keyword">new</span> <span class="title class_">DCLLazy</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dcllazy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DCL懒汉式的单例，保证了线程的安全性，又符合了懒加载，只有在用到的时候，才会去初始化，调用效率也比较高，但是这种写法<strong>在极端情况下</strong>还是可能会有一定的问题。因为dcllazy &#x3D; new DCLLazy()<strong>不是原子性操作</strong>，可能会导致<strong>指令重排</strong>。所以可以加上<strong>volatile</strong>关键字防止指令重排！！！</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DCLLazy</span> &#123;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">DCLLazy</span><span class="params">()</span> &#123;  </span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DCLLazy dcllazy;</span><br><span class="line"><span class="keyword">public</span> DCLLazy <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (dcllazy == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (DCLLazy.class)&#123;</span><br><span class="line">            dcllazy = <span class="keyword">new</span> <span class="title class_">DCLLazy</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dcllazy;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>}</p>
</li>
</ol>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
  </entry>
  <entry>
    <title>四大函数式接口</title>
    <url>/2021/11/05/%E5%9B%9B%E5%A4%A7%E5%87%BD%E6%95%B0%E5%BC%8F%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>java.util.function , Java 内置核心四大函数式接口。</p>
<p><a href="https://imgtu.com/i/7FT2Xn"><img src="https://s4.ax1x.com/2022/01/09/7FT2Xn.png" alt="7FT2Xn.png"></a></p>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>函数型接口，有一个输入有一个输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Function&lt;String,Integer&gt; function=<span class="keyword">new</span> <span class="title class_">Function</span>&lt;String ,Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">apply</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length()==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>  -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> a=function.apply(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(a);</span><br></pre></td></tr></table></figure>

<h2 id="Supplier"><a href="#Supplier" class="headerlink" title="Supplier"></a>Supplier</h2><p>供给型接口，没有输入参数，只有返回参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Supplier&lt;String&gt; supplier=new Supplier&lt;String&gt;() &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public String get() &#123;</span><br><span class="line">        return &quot;782&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">String b=supplier.get();</span><br><span class="line">System.out.println(b);</span><br></pre></td></tr></table></figure>

<h2 id="Predicate"><a href="#Predicate" class="headerlink" title="Predicate"></a>Predicate</h2><p>断定型接口，有一个输入参数，返回只有布尔值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Predicate&lt;String&gt; predicate=<span class="keyword">new</span> <span class="title class_">Predicate</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">test</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length()==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>  <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">boolean</span> c=predicate.test(<span class="string">&quot;123&quot;</span>);</span><br><span class="line">System.out.println(c);</span><br></pre></td></tr></table></figure>

<h2 id="Consumer"><a href="#Consumer" class="headerlink" title="Consumer"></a>Consumer</h2><p>消费型接口，有一个输入参数，没有返回值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Consumer&lt;String&gt; consumer=<span class="keyword">new</span> <span class="title class_">Consumer</span>&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(String s)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是&quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">consumer.accept(<span class="string">&quot;猪&quot;</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>Java反射</title>
    <url>/2021/11/01/%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="Java反射"><a href="#Java反射" class="headerlink" title="Java反射"></a>Java反射</h1><p>Reflflection（反射）是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。</p>
<p><strong>优点：</strong>可以实现动态创建对象和编译，体现出很大的灵活性 !</p>
<p><strong>缺点：</strong>对性能有影响。使用反射基本上是一种解释操作，我们可以告诉JVM，我们希望做什么并且它满</p>
<p>​             足我们的要求。这类操作总是慢于 直接执行相同的操作。</p>
<p><strong>java反射机制提供的功能：</strong></p>
<ul>
<li>在运行时判断任意一个对象所属的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时判断任意一个类所具有的成员变量和方法</li>
<li>在运行时获取泛型信息</li>
<li>在运行时调用任意一个对象的成员变量和方法</li>
<li>在运行时处理注解</li>
<li>生成动态代理</li>
<li>……</li>
</ul>
<p><strong>获取Class对象的几种方式：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">//方式1 通过类的静态成员class获得</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> Student.class;</span><br><span class="line">    <span class="comment">//方式2 通过字符串获得(包名+类名)</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">studentClass2</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.zht.pojo.Student&quot;</span>);</span><br><span class="line">    <span class="comment">//方式3 通过对象获得</span></span><br><span class="line">    Student student=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">studentClass3</span> <span class="operator">=</span> student.getClass();</span><br><span class="line">    <span class="comment">// 只针对内置的基本数据类型</span></span><br><span class="line">    <span class="type">Class</span> <span class="variable">integerClass</span> <span class="operator">=</span> Integer.class;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常用方法：</strong></p>
<ul>
<li><strong>static ClassforName(String name)</strong>  返回指定类名name的Class对象</li>
<li><strong>Object newInstance()</strong> 调用缺省构造函数，返回Class对象的一个实例</li>
<li>**getName()**返回此Class对象所表示的实体（类，接口，数组类或void）的名称。</li>
<li><strong>Class getSuperClass()</strong> 返回当前Class对象的父类的Class对象</li>
<li><strong>Class[] getinterfaces()</strong> 获取当前Class对象的接口</li>
<li><strong>ClassLoader getClassLoader()</strong> 返回该类的类加载器</li>
<li><strong>Constructor[] getConstructors()</strong> 返回一个包含某些Constructor对象的数组</li>
<li>**Method getMothed(Stringname,Class.. T)**返回一个Method对象，此对象的形参类型为paramType</li>
<li><strong>Field[] getDeclaredFields()</strong> 返回Field对象的一个数组</li>
</ul>
<p>简单举例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InvocationTargetException, IllegalAccessException, InstantiationException, NoSuchFieldException &#123;</span><br><span class="line">    Student student=<span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">    <span class="type">Class</span> <span class="variable">studentClass</span> <span class="operator">=</span> student.getClass();</span><br><span class="line">    <span class="comment">//获取所有非私有方法包括父类</span></span><br><span class="line">    Method[] methods1 = studentClass.getMethods();</span><br><span class="line">    <span class="comment">//获取所有当前类中（this）中的所有方法</span></span><br><span class="line">    Method[] methods2 = studentClass.getDeclaredMethods();</span><br><span class="line">    <span class="comment">//获取所有当前类的非私有属性</span></span><br><span class="line">    Field[] fields = studentClass.getFields();</span><br><span class="line">    <span class="comment">//获取某一个属性</span></span><br><span class="line">    <span class="type">Field</span> <span class="variable">sex</span> <span class="operator">=</span> studentClass.getDeclaredField(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">    <span class="comment">//属性赋值</span></span><br><span class="line">    sex.set(student,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    System.out.println(sex.get(student));</span><br><span class="line">    <span class="comment">//获取某一个方法</span></span><br><span class="line">    <span class="type">Method</span> <span class="variable">methods</span> <span class="operator">=</span> studentClass.getDeclaredMethod(<span class="string">&quot;say&quot;</span>);</span><br><span class="line">                <span class="comment">//private修饰 暴露私有 不然会报错</span></span><br><span class="line">               methods.setAccessible(<span class="literal">true</span>);</span><br><span class="line">               <span class="comment">//调用方法</span></span><br><span class="line">               methods.invoke(studentClass.newInstance());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多练…………………………..</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
  </entry>
  <entry>
    <title>线程常用辅助类</title>
    <url>/2021/10/21/%E7%BA%BF%E7%A8%8B%E5%B8%B8%E7%94%A8%E8%BE%85%E5%8A%A9%E7%B1%BB/</url>
    <content><![CDATA[<h2 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    CountDownLatch countDownLatch=<span class="keyword">new</span> <span class="title class_">CountDownLatch</span>(<span class="number">6</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">6</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            countDownLatch.countDown();<span class="comment">//计数-1</span></span><br><span class="line">        &#125;,String.valueOf(i)).start();</span><br><span class="line">    &#125;</span><br><span class="line">     countDownLatch.await();</span><br><span class="line">    <span class="comment">//等待线程执行完（保证顺序）</span></span><br><span class="line">    System.out.println(<span class="string">&quot;end&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>运行结果：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br></pre></td></tr></table></figure>

<p>end</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//顺序不一定，结果诡异，达不到预期的最后End（最后输出end）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot; Start&quot;</span>);</span><br><span class="line">            &#125;, String.valueOf(i)).start();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; End&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>原理</strong>：</p>
<ul>
<li>CountDownLatch 主要有两个方法，当一个或多个线程调用 await 方法时，这些线程会阻塞</li>
<li>其他线程调用CountDown方法会将计数器减1（调用CountDown方法的线程不会阻塞）</li>
<li>当计数器变为0时，await 方法阻塞的线程会被唤醒，继续执行</li>
</ul>
<h2 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h2><p><strong>作用：</strong>和上面的减法相反，这里是加法。当到达一定的数量后（也可能不止，要&gt;&#x3D;第一个参数）再做某一件事情。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    CyclicBarrier cyclicBarrier=<span class="keyword">new</span> <span class="title class_">CyclicBarrier</span>(<span class="number">7</span>,()-&gt;&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这几个老哥来了&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">7</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                cyclicBarrier.await();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, String.valueOf(i)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h2><p>在信号量上我们定义两种操作：</p>
<p><strong>acquire（获取</strong>）当一个线程调用 acquire 操作时，他要么通过成功获取信号量（信号量-1），要么一直等下去，直到有线程释放信号量，或超时。</p>
<p><strong>release （释放）</strong>实际上会将信号量的值 + 1，然后唤醒等待的线程。（release）信号量主要用于两个目的：一个是用于多个共享资源的互斥使用，另一个用于并发线程数的控制。</p>
<p>举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">    Semaphore semaphore=<span class="keyword">new</span> <span class="title class_">Semaphore</span>(<span class="number">3</span>);<span class="comment">//模拟三个车位</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;=<span class="number">6</span>; i++) &#123;<span class="comment">//模拟6个车</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//得到资源</span></span><br><span class="line">                semaphore.acquire();</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;车得到了车位&quot;</span>);</span><br><span class="line">                TimeUnit.SECONDS.sleep(<span class="number">3</span>);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot;车离开了了车位&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//释放资源，让别的线程去获得资源</span></span><br><span class="line">                semaphore.release();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;, String.valueOf(i)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>运行结果</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>车得到了车位</span><br><span class="line"><span class="number">3</span>车得到了车位</span><br><span class="line"><span class="number">2</span>车得到了车位</span><br><span class="line"><span class="number">3</span>车离开了了车位</span><br><span class="line"><span class="number">1</span>车离开了了车位</span><br><span class="line"><span class="number">2</span>车离开了了车位</span><br><span class="line"><span class="number">4</span>车得到了车位</span><br><span class="line"><span class="number">5</span>车得到了车位</span><br><span class="line"><span class="number">6</span>车得到了车位</span><br><span class="line"><span class="number">5</span>车离开了了车位</span><br><span class="line"><span class="number">4</span>车离开了了车位</span><br><span class="line"><span class="number">6</span>车离开了了车位</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>多线程</category>
      </categories>
  </entry>
  <entry>
    <title>故乡的小诗</title>
    <url>/2021/09/15/%E6%95%85%E4%B9%A1%E7%9A%84%E5%B0%8F%E8%AF%97/</url>
    <content><![CDATA[<h3 id="《故乡的小诗》————-做个梦给你"><a href="#《故乡的小诗》————-做个梦给你" class="headerlink" title="《故乡的小诗》———— 做个梦给你"></a>《故乡的小诗》———— 做个梦给你</h3> <br/>

<p>桂花树在早秋的日子里</p>
<p>等了一整个清晨</p>
<p>像酝酿着萌芽的梦想一般</p>
<p>轻轻地、静静地、慢慢地钻出土来</p>
 <br/>


<p>我在院子里</p>
<p>看一树的花开</p>
<p>看斑驳的墙角</p>
<p>青砖白瓦纸似的翻了边</p>
<p>展露出灰白的石墙</p>
 <br/>

<p>树影交错掉落 横在泥土地上</p>
<p>树缝间的点点阳光 若隐若现</p>
<p>描摹而出的明暗倩影</p>
<p>铺在水泥小道上</p>
 <br/>

<p>墙尾的自行车</p>
<p>已很难被人记起</p>
<p>车轮早已瘪了下去</p>
<p>锈迹斑斑</p>
<p>仿佛记留着它走过的长街巷尾</p>
<p>踩过的青石巷</p>
<p>载过的稚童幼女</p>
<p>欢声、笑语、沉默</p>
<p>都还停留在不停滚动的车轮上</p>
<p>岁月把车座打磨得光亮</p>
<p>厚厚的灰尘也难掩它的光泽</p>
<p>曾经的我们也坐在自行车后座上</p>
<p>感受着耳边的风声呼呼</p>
<p>观赏着天边的晚霞静默</p>
<p>落日滚圆滚圆的</p>
<p>快乐与悲伤</p>
<p>都一并被收进旧时光的大口袋里</p>
<p>点点滴滴的积攒着</p>
 <br/>

<p>时过经年 </p>
<p>静默着静默着</p>
<p>无需告诉太阳和月亮</p>
<p>只留星星照看他们</p>
<p>陪着他们永不枯萎</p>
<p><a href="https://imgtu.com/i/4nokKH"><img src="https://z3.ax1x.com/2021/09/16/4nokKH.jpg" alt="4nokKH.jpg"></a></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>配置JDK</title>
    <url>/2021/06/28/%E9%85%8D%E7%BD%AEJDK/</url>
    <content><![CDATA[<ol>
<li><p>此电脑–高级系统设置–系统属性–高级–环境变量</p>
</li>
<li><p>在系统变量下点击新建,变量名为JAVA_HOME，变量值为C:\Program Files\Java\jdk1.8.0_152（这个为你安装jdk的路径，我的是这个，你们自己的时情况而定），如图所示：<img src="https://i.loli.net/2021/06/29/Feo7g2VfEwQK8yi.png"></p>
</li>
<li><p>和JAVA_HOME一样，新建一个名为“CLASSPATH”的环境变量，变量值为 .;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar（同上，找到自己电脑所对应的即可），如图所示：<img src="https://i.loli.net/2021/06/29/XfoeqjNnUySQwYP.png"></p>
</li>
<li><p>设置Path环境变量，该变量已经存在，所以在列表中选择Path，点击下方的“编辑”按钮，在弹出的窗口中添加如下信息：%JAVA_HOME%\bin，然后点击“确认”按钮即可。如图所示：<img src="https://i.loli.net/2021/06/29/v19YRktTaiGodW7.png"></p>
</li>
<li><p>在配置好环境变量后，可以进入cmd中检查Java是否安装正确，检查的命令为 java -version，如图所示：<img src="https://i.loli.net/2021/06/29/fZ5R6EM1uBzb9cH.png"></p>
<p>如果能正确的输出Java的版本和JVM版本信息，则说明Java安装正确。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>配置</tag>
      </tags>
  </entry>
</search>
